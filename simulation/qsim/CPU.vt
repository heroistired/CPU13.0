// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2016 20:57:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_vlg_sample_tst(
	CLK,
	DI,
	N1,
	N2,
	ND,
	REG_WE,
	RESET,
	sampler_tx
);
input  CLK;
input [7:0] DI;
input [1:0] N1;
input [1:0] N2;
input [1:0] ND;
input  REG_WE;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DI or N1 or N2 or ND or REG_WE or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_vlg_check_tst (
	Q1,
	Q2,
	sampler_rx
);
input [7:0] Q1;
input [7:0] Q2;
input sampler_rx;

reg [7:0] Q1_expected;
reg [7:0] Q2_expected;

reg [7:0] Q1_prev;
reg [7:0] Q2_prev;

reg [7:0] Q1_expected_prev;
reg [7:0] Q2_expected_prev;

reg [7:0] last_Q1_exp;
reg [7:0] last_Q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q1_prev = Q1;
	Q2_prev = Q2;
end

// update expected /o prevs

always @(trigger)
begin
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
end


// expected Q1[ 7 ]
initial
begin
	Q1_expected[7] = 1'bX;
end 
// expected Q1[ 6 ]
initial
begin
	Q1_expected[6] = 1'bX;
end 
// expected Q1[ 5 ]
initial
begin
	Q1_expected[5] = 1'bX;
end 
// expected Q1[ 4 ]
initial
begin
	Q1_expected[4] = 1'bX;
end 
// expected Q1[ 3 ]
initial
begin
	Q1_expected[3] = 1'bX;
end 
// expected Q1[ 2 ]
initial
begin
	Q1_expected[2] = 1'bX;
end 
// expected Q1[ 1 ]
initial
begin
	Q1_expected[1] = 1'bX;
end 
// expected Q1[ 0 ]
initial
begin
	Q1_expected[0] = 1'bX;
end 
// expected Q2[ 7 ]
initial
begin
	Q2_expected[7] = 1'bX;
end 
// expected Q2[ 6 ]
initial
begin
	Q2_expected[6] = 1'bX;
end 
// expected Q2[ 5 ]
initial
begin
	Q2_expected[5] = 1'bX;
end 
// expected Q2[ 4 ]
initial
begin
	Q2_expected[4] = 1'bX;
end 
// expected Q2[ 3 ]
initial
begin
	Q2_expected[3] = 1'bX;
end 
// expected Q2[ 2 ]
initial
begin
	Q2_expected[2] = 1'bX;
end 
// expected Q2[ 1 ]
initial
begin
	Q2_expected[1] = 1'bX;
end 
// expected Q2[ 0 ]
initial
begin
	Q2_expected[0] = 1'bX;
end 
// generate trigger
always @(Q1_expected or Q1 or Q2_expected or Q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q1 = %b | expected Q2 = %b | ",Q1_expected_prev,Q2_expected_prev);
	$display("| real Q1 = %b | real Q2 = %b | ",Q1_prev,Q2_prev);
`endif
	if (
		( Q1_expected_prev[0] !== 1'bx ) && ( Q1_prev[0] !== Q1_expected_prev[0] )
		&& ((Q1_expected_prev[0] !== last_Q1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[0] = Q1_expected_prev[0];
	end
	if (
		( Q1_expected_prev[1] !== 1'bx ) && ( Q1_prev[1] !== Q1_expected_prev[1] )
		&& ((Q1_expected_prev[1] !== last_Q1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[1] = Q1_expected_prev[1];
	end
	if (
		( Q1_expected_prev[2] !== 1'bx ) && ( Q1_prev[2] !== Q1_expected_prev[2] )
		&& ((Q1_expected_prev[2] !== last_Q1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[2] = Q1_expected_prev[2];
	end
	if (
		( Q1_expected_prev[3] !== 1'bx ) && ( Q1_prev[3] !== Q1_expected_prev[3] )
		&& ((Q1_expected_prev[3] !== last_Q1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[3] = Q1_expected_prev[3];
	end
	if (
		( Q1_expected_prev[4] !== 1'bx ) && ( Q1_prev[4] !== Q1_expected_prev[4] )
		&& ((Q1_expected_prev[4] !== last_Q1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[4] = Q1_expected_prev[4];
	end
	if (
		( Q1_expected_prev[5] !== 1'bx ) && ( Q1_prev[5] !== Q1_expected_prev[5] )
		&& ((Q1_expected_prev[5] !== last_Q1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[5] = Q1_expected_prev[5];
	end
	if (
		( Q1_expected_prev[6] !== 1'bx ) && ( Q1_prev[6] !== Q1_expected_prev[6] )
		&& ((Q1_expected_prev[6] !== last_Q1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[6] = Q1_expected_prev[6];
	end
	if (
		( Q1_expected_prev[7] !== 1'bx ) && ( Q1_prev[7] !== Q1_expected_prev[7] )
		&& ((Q1_expected_prev[7] !== last_Q1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q1_exp[7] = Q1_expected_prev[7];
	end
	if (
		( Q2_expected_prev[0] !== 1'bx ) && ( Q2_prev[0] !== Q2_expected_prev[0] )
		&& ((Q2_expected_prev[0] !== last_Q2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[0] = Q2_expected_prev[0];
	end
	if (
		( Q2_expected_prev[1] !== 1'bx ) && ( Q2_prev[1] !== Q2_expected_prev[1] )
		&& ((Q2_expected_prev[1] !== last_Q2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[1] = Q2_expected_prev[1];
	end
	if (
		( Q2_expected_prev[2] !== 1'bx ) && ( Q2_prev[2] !== Q2_expected_prev[2] )
		&& ((Q2_expected_prev[2] !== last_Q2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[2] = Q2_expected_prev[2];
	end
	if (
		( Q2_expected_prev[3] !== 1'bx ) && ( Q2_prev[3] !== Q2_expected_prev[3] )
		&& ((Q2_expected_prev[3] !== last_Q2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[3] = Q2_expected_prev[3];
	end
	if (
		( Q2_expected_prev[4] !== 1'bx ) && ( Q2_prev[4] !== Q2_expected_prev[4] )
		&& ((Q2_expected_prev[4] !== last_Q2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[4] = Q2_expected_prev[4];
	end
	if (
		( Q2_expected_prev[5] !== 1'bx ) && ( Q2_prev[5] !== Q2_expected_prev[5] )
		&& ((Q2_expected_prev[5] !== last_Q2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[5] = Q2_expected_prev[5];
	end
	if (
		( Q2_expected_prev[6] !== 1'bx ) && ( Q2_prev[6] !== Q2_expected_prev[6] )
		&& ((Q2_expected_prev[6] !== last_Q2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[6] = Q2_expected_prev[6];
	end
	if (
		( Q2_expected_prev[7] !== 1'bx ) && ( Q2_prev[7] !== Q2_expected_prev[7] )
		&& ((Q2_expected_prev[7] !== last_Q2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q2_exp[7] = Q2_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] DI;
reg [1:0] N1;
reg [1:0] N2;
reg [1:0] ND;
reg REG_WE;
reg RESET;
// wires                                               
wire [7:0] Q1;
wire [7:0] Q2;

wire sampler;                             

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DI(DI),
	.N1(N1),
	.N2(N2),
	.ND(ND),
	.Q1(Q1),
	.Q2(Q2),
	.REG_WE(REG_WE),
	.RESET(RESET)
);

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #40000 1'b1;
		# 40000;
	end
	CLK = 1'b0;
end 
// DI[ 7 ]
initial
begin
	DI[7] = 1'b0;
end 
// DI[ 6 ]
initial
begin
	DI[6] = 1'b0;
end 
// DI[ 5 ]
initial
begin
	DI[5] = 1'b0;
end 
// DI[ 4 ]
initial
begin
	DI[4] = 1'b0;
end 
// DI[ 3 ]
initial
begin
	DI[3] = 1'b0;
end 
// DI[ 2 ]
initial
begin
	DI[2] = 1'b0;
	DI[2] = #160000 1'b1;
	DI[2] = #160000 1'b0;
end 
// DI[ 1 ]
initial
begin
	DI[1] = 1'b0;
	DI[1] = #80000 1'b1;
	DI[1] = #80000 1'b0;
	DI[1] = #80000 1'b1;
	DI[1] = #80000 1'b0;
end 
// DI[ 0 ]
initial
begin
	DI[0] = 1'b1;
	DI[0] = #320000 1'b0;
end 
// N1[ 1 ]
initial
begin
	N1[1] = 1'b0;
end 
// N1[ 0 ]
initial
begin
	N1[0] = 1'b0;
	N1[0] = #400000 1'b1;
	N1[0] = #80000 1'b0;
	N1[0] = #140000 1'b1;
	N1[0] = #80000 1'b0;
end 
// N2[ 1 ]
initial
begin
	N2[1] = 1'b0;
	N2[1] = #320000 1'b1;
	N2[1] = #160000 1'b0;
	N2[1] = #60000 1'b1;
	N2[1] = #160000 1'b0;
end 
// N2[ 0 ]
initial
begin
	N2[0] = 1'b0;
	N2[0] = #400000 1'b1;
	N2[0] = #80000 1'b0;
	N2[0] = #140000 1'b1;
	N2[0] = #80000 1'b0;
end 
// ND[ 1 ]
initial
begin
	ND[1] = 1'b0;
	ND[1] = #160000 1'b1;
	ND[1] = #160000 1'b0;
end 
// ND[ 0 ]
initial
begin
	ND[0] = 1'b0;
	ND[0] = #80000 1'b1;
	ND[0] = #80000 1'b0;
	ND[0] = #80000 1'b1;
	ND[0] = #80000 1'b0;
end 

// REG_WE
initial
begin
	REG_WE = 1'b1;
	REG_WE = #320000 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
	RESET = #40000 1'b0;
	RESET = #440000 1'b1;
	RESET = #60000 1'b0;
end 

test_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DI(DI),
	.N1(N1),
	.N2(N2),
	.ND(ND),
	.REG_WE(REG_WE),
	.RESET(RESET),
	.sampler_tx(sampler)
);

test_vlg_check_tst tb_out(
	.Q1(Q1),
	.Q2(Q2),
	.sampler_rx(sampler)
);
endmodule

