// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/01/2016 16:10:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    systemB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module systemB_vlg_sample_tst(
	CLK,
	RST,
	sampler_tx
);
input  CLK;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module systemB_vlg_check_tst (
	ALUSRCB,
	branch,
	cs,
	data_inH,
	data_inL,
	DI,
	flagin,
	flagout,
	instr,
	IO0,
	IO1,
	IO_read,
	jump,
	memtoreg,
	N1,
	N2,
	ND,
	num_C0,
	num_C1,
	num_C2,
	num_C3,
	pc,
	q0,
	Q1,
	Q2,
	q3,
	q4,
	q5,
	q6,
	q7,
	Q10,
	Q11,
	Q12,
	Q13,
	Q14,
	Q15,
	Q16,
	Q17,
	Q20,
	Q21,
	Q22,
	Q23,
	Q24,
	Q25,
	Q26,
	Q27,
	ram,
	reg_we,
	regdes,
	result,
	S,
	sign,
	wrflag,
	writemem,
	sampler_rx
);
input  ALUSRCB;
input  branch;
input [3:0] cs;
input [7:0] data_inH;
input [7:0] data_inL;
input [7:0] DI;
input [1:0] flagin;
input [7:0] flagout;
input [15:0] instr;
input [7:0] IO0;
input [7:0] IO1;
input  IO_read;
input  jump;
input  memtoreg;
input [1:0] N1;
input [1:0] N2;
input [7:0] ND;
input [3:0] num_C0;
input [3:0] num_C1;
input [3:0] num_C2;
input [3:0] num_C3;
input [7:0] pc;
input  q0;
input  Q1;
input  Q2;
input  q3;
input  q4;
input  q5;
input  q6;
input  q7;
input  Q10;
input  Q11;
input  Q12;
input  Q13;
input  Q14;
input  Q15;
input  Q16;
input  Q17;
input  Q20;
input  Q21;
input  Q22;
input  Q23;
input  Q24;
input  Q25;
input  Q26;
input  Q27;
input [7:0] ram;
input  reg_we;
input  regdes;
input [7:0] result;
input [7:0] S;
input  sign;
input  wrflag;
input  writemem;
input sampler_rx;

reg  ALUSRCB_expected;
reg  branch_expected;
reg [3:0] cs_expected;
reg [7:0] data_inH_expected;
reg [7:0] data_inL_expected;
reg [7:0] DI_expected;
reg [1:0] flagin_expected;
reg [7:0] flagout_expected;
reg [15:0] instr_expected;
reg [7:0] IO0_expected;
reg [7:0] IO1_expected;
reg  IO_read_expected;
reg  jump_expected;
reg  memtoreg_expected;
reg [1:0] N1_expected;
reg [1:0] N2_expected;
reg [7:0] ND_expected;
reg [3:0] num_C0_expected;
reg [3:0] num_C1_expected;
reg [3:0] num_C2_expected;
reg [3:0] num_C3_expected;
reg [7:0] pc_expected;
reg  q0_expected;
reg  Q1_expected;
reg  Q2_expected;
reg  q3_expected;
reg  q4_expected;
reg  q5_expected;
reg  q6_expected;
reg  q7_expected;
reg  Q10_expected;
reg  Q11_expected;
reg  Q12_expected;
reg  Q13_expected;
reg  Q14_expected;
reg  Q15_expected;
reg  Q16_expected;
reg  Q17_expected;
reg  Q20_expected;
reg  Q21_expected;
reg  Q22_expected;
reg  Q23_expected;
reg  Q24_expected;
reg  Q25_expected;
reg  Q26_expected;
reg  Q27_expected;
reg [7:0] ram_expected;
reg  reg_we_expected;
reg  regdes_expected;
reg [7:0] result_expected;
reg [7:0] S_expected;
reg  sign_expected;
reg  wrflag_expected;
reg  writemem_expected;

reg  ALUSRCB_prev;
reg  branch_prev;
reg [3:0] cs_prev;
reg [7:0] data_inH_prev;
reg [7:0] data_inL_prev;
reg [7:0] DI_prev;
reg [1:0] flagin_prev;
reg [7:0] flagout_prev;
reg [15:0] instr_prev;
reg [7:0] IO0_prev;
reg [7:0] IO1_prev;
reg  IO_read_prev;
reg  jump_prev;
reg  memtoreg_prev;
reg [1:0] N1_prev;
reg [1:0] N2_prev;
reg [7:0] ND_prev;
reg [3:0] num_C0_prev;
reg [3:0] num_C1_prev;
reg [3:0] num_C2_prev;
reg [3:0] num_C3_prev;
reg [7:0] pc_prev;
reg  q0_prev;
reg  Q1_prev;
reg  Q2_prev;
reg  q3_prev;
reg  q4_prev;
reg  q5_prev;
reg  q6_prev;
reg  q7_prev;
reg  Q10_prev;
reg  Q11_prev;
reg  Q12_prev;
reg  Q13_prev;
reg  Q14_prev;
reg  Q15_prev;
reg  Q16_prev;
reg  Q17_prev;
reg  Q20_prev;
reg  Q21_prev;
reg  Q22_prev;
reg  Q23_prev;
reg  Q24_prev;
reg  Q25_prev;
reg  Q26_prev;
reg  Q27_prev;
reg [7:0] ram_prev;
reg  reg_we_prev;
reg  regdes_prev;
reg [7:0] result_prev;
reg [7:0] S_prev;
reg  sign_prev;
reg  wrflag_prev;
reg  writemem_prev;

reg  ALUSRCB_expected_prev;
reg  branch_expected_prev;
reg [3:0] cs_expected_prev;
reg [7:0] data_inH_expected_prev;
reg [7:0] data_inL_expected_prev;
reg [7:0] DI_expected_prev;
reg [1:0] flagin_expected_prev;
reg [7:0] flagout_expected_prev;
reg [15:0] instr_expected_prev;
reg [7:0] IO0_expected_prev;
reg [7:0] IO1_expected_prev;
reg  IO_read_expected_prev;
reg  jump_expected_prev;
reg  memtoreg_expected_prev;
reg [1:0] N1_expected_prev;
reg [1:0] N2_expected_prev;
reg [7:0] ND_expected_prev;
reg [3:0] num_C0_expected_prev;
reg [3:0] num_C1_expected_prev;
reg [3:0] num_C2_expected_prev;
reg [3:0] num_C3_expected_prev;
reg [7:0] pc_expected_prev;
reg  q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;
reg  q3_expected_prev;
reg  q4_expected_prev;
reg  q5_expected_prev;
reg  q6_expected_prev;
reg  q7_expected_prev;
reg  Q10_expected_prev;
reg  Q11_expected_prev;
reg  Q12_expected_prev;
reg  Q13_expected_prev;
reg  Q14_expected_prev;
reg  Q15_expected_prev;
reg  Q16_expected_prev;
reg  Q17_expected_prev;
reg  Q20_expected_prev;
reg  Q21_expected_prev;
reg  Q22_expected_prev;
reg  Q23_expected_prev;
reg  Q24_expected_prev;
reg  Q25_expected_prev;
reg  Q26_expected_prev;
reg  Q27_expected_prev;
reg [7:0] ram_expected_prev;
reg  reg_we_expected_prev;
reg  regdes_expected_prev;
reg [7:0] result_expected_prev;
reg [7:0] S_expected_prev;
reg  sign_expected_prev;
reg  wrflag_expected_prev;
reg  writemem_expected_prev;

reg  last_ALUSRCB_exp;
reg  last_branch_exp;
reg [3:0] last_cs_exp;
reg [7:0] last_data_inH_exp;
reg [7:0] last_data_inL_exp;
reg [7:0] last_DI_exp;
reg [1:0] last_flagin_exp;
reg [7:0] last_flagout_exp;
reg [15:0] last_instr_exp;
reg [7:0] last_IO0_exp;
reg [7:0] last_IO1_exp;
reg  last_IO_read_exp;
reg  last_jump_exp;
reg  last_memtoreg_exp;
reg [1:0] last_N1_exp;
reg [1:0] last_N2_exp;
reg [7:0] last_ND_exp;
reg [3:0] last_num_C0_exp;
reg [3:0] last_num_C1_exp;
reg [3:0] last_num_C2_exp;
reg [3:0] last_num_C3_exp;
reg [7:0] last_pc_exp;
reg  last_q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;
reg  last_q3_exp;
reg  last_q4_exp;
reg  last_q5_exp;
reg  last_q6_exp;
reg  last_q7_exp;
reg  last_Q10_exp;
reg  last_Q11_exp;
reg  last_Q12_exp;
reg  last_Q13_exp;
reg  last_Q14_exp;
reg  last_Q15_exp;
reg  last_Q16_exp;
reg  last_Q17_exp;
reg  last_Q20_exp;
reg  last_Q21_exp;
reg  last_Q22_exp;
reg  last_Q23_exp;
reg  last_Q24_exp;
reg  last_Q25_exp;
reg  last_Q26_exp;
reg  last_Q27_exp;
reg [7:0] last_ram_exp;
reg  last_reg_we_exp;
reg  last_regdes_exp;
reg [7:0] last_result_exp;
reg [7:0] last_S_exp;
reg  last_sign_exp;
reg  last_wrflag_exp;
reg  last_writemem_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:54] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 54'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUSRCB_prev = ALUSRCB;
	branch_prev = branch;
	cs_prev = cs;
	data_inH_prev = data_inH;
	data_inL_prev = data_inL;
	DI_prev = DI;
	flagin_prev = flagin;
	flagout_prev = flagout;
	instr_prev = instr;
	IO0_prev = IO0;
	IO1_prev = IO1;
	IO_read_prev = IO_read;
	jump_prev = jump;
	memtoreg_prev = memtoreg;
	N1_prev = N1;
	N2_prev = N2;
	ND_prev = ND;
	num_C0_prev = num_C0;
	num_C1_prev = num_C1;
	num_C2_prev = num_C2;
	num_C3_prev = num_C3;
	pc_prev = pc;
	q0_prev = q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
	q3_prev = q3;
	q4_prev = q4;
	q5_prev = q5;
	q6_prev = q6;
	q7_prev = q7;
	Q10_prev = Q10;
	Q11_prev = Q11;
	Q12_prev = Q12;
	Q13_prev = Q13;
	Q14_prev = Q14;
	Q15_prev = Q15;
	Q16_prev = Q16;
	Q17_prev = Q17;
	Q20_prev = Q20;
	Q21_prev = Q21;
	Q22_prev = Q22;
	Q23_prev = Q23;
	Q24_prev = Q24;
	Q25_prev = Q25;
	Q26_prev = Q26;
	Q27_prev = Q27;
	ram_prev = ram;
	reg_we_prev = reg_we;
	regdes_prev = regdes;
	result_prev = result;
	S_prev = S;
	sign_prev = sign;
	wrflag_prev = wrflag;
	writemem_prev = writemem;
end

// update expected /o prevs

always @(trigger)
begin
	ALUSRCB_expected_prev = ALUSRCB_expected;
	branch_expected_prev = branch_expected;
	cs_expected_prev = cs_expected;
	data_inH_expected_prev = data_inH_expected;
	data_inL_expected_prev = data_inL_expected;
	DI_expected_prev = DI_expected;
	flagin_expected_prev = flagin_expected;
	flagout_expected_prev = flagout_expected;
	instr_expected_prev = instr_expected;
	IO0_expected_prev = IO0_expected;
	IO1_expected_prev = IO1_expected;
	IO_read_expected_prev = IO_read_expected;
	jump_expected_prev = jump_expected;
	memtoreg_expected_prev = memtoreg_expected;
	N1_expected_prev = N1_expected;
	N2_expected_prev = N2_expected;
	ND_expected_prev = ND_expected;
	num_C0_expected_prev = num_C0_expected;
	num_C1_expected_prev = num_C1_expected;
	num_C2_expected_prev = num_C2_expected;
	num_C3_expected_prev = num_C3_expected;
	pc_expected_prev = pc_expected;
	q0_expected_prev = q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
	q3_expected_prev = q3_expected;
	q4_expected_prev = q4_expected;
	q5_expected_prev = q5_expected;
	q6_expected_prev = q6_expected;
	q7_expected_prev = q7_expected;
	Q10_expected_prev = Q10_expected;
	Q11_expected_prev = Q11_expected;
	Q12_expected_prev = Q12_expected;
	Q13_expected_prev = Q13_expected;
	Q14_expected_prev = Q14_expected;
	Q15_expected_prev = Q15_expected;
	Q16_expected_prev = Q16_expected;
	Q17_expected_prev = Q17_expected;
	Q20_expected_prev = Q20_expected;
	Q21_expected_prev = Q21_expected;
	Q22_expected_prev = Q22_expected;
	Q23_expected_prev = Q23_expected;
	Q24_expected_prev = Q24_expected;
	Q25_expected_prev = Q25_expected;
	Q26_expected_prev = Q26_expected;
	Q27_expected_prev = Q27_expected;
	ram_expected_prev = ram_expected;
	reg_we_expected_prev = reg_we_expected;
	regdes_expected_prev = regdes_expected;
	result_expected_prev = result_expected;
	S_expected_prev = S_expected;
	sign_expected_prev = sign_expected;
	wrflag_expected_prev = wrflag_expected;
	writemem_expected_prev = writemem_expected;
end



// expected ALUSRCB
initial
begin
	repeat(12)
	begin
		ALUSRCB_expected = 1'b1;
		# 80000;
		repeat(4)
		begin
			ALUSRCB_expected = 1'b0;
			ALUSRCB_expected = #20000 1'b1;
			# 110000;
		end
		ALUSRCB_expected = 1'b0;
		ALUSRCB_expected = #20000 1'b1;
		ALUSRCB_expected = #150000 1'b0;
		# 10000;
	end
	ALUSRCB_expected = 1'b1;
	# 80000;
	repeat(4)
	begin
		ALUSRCB_expected = 1'b0;
		ALUSRCB_expected = #20000 1'b1;
		# 110000;
	end
	ALUSRCB_expected = 1'b0;
	ALUSRCB_expected = #20000 1'b1;
end 

// expected branch
initial
begin
	branch_expected = 1'b0;
end 
// expected DI[ 7 ]
initial
begin
	DI_expected[7] = 1'b0;
	DI_expected[7] = #40000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #90000 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[7] = 1'b1;
		DI_expected[7] = #10000 1'b0;
		# 20000;
	end
	DI_expected[7] = 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #85000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #25000 1'b1;
	DI_expected[7] = #15000 1'b0;
	DI_expected[7] = #70000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #110000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #20000 1'b1;
	DI_expected[7] = #10000 1'b0;
	DI_expected[7] = #80000 1'b1;
	DI_expected[7] = #5000 1'b0;
	DI_expected[7] = #10000 1'b1;
	DI_expected[7] = #5000 1'b0;
end 
// expected DI[ 6 ]
initial
begin
	DI_expected[6] = 1'b0;
	DI_expected[6] = #50000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b0;
		DI_expected[6] = #90000 1'b1;
		# 5000;
	end
	DI_expected[6] = 1'bX;
	# 10000;
	repeat(2)
	begin
		DI_expected[6] = 1'b1;
		DI_expected[6] = #10000 1'b0;
		# 20000;
	end
	DI_expected[6] = 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #30000 1'b1;
	DI_expected[6] = #15000 1'b0;
	DI_expected[6] = #80000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #125000 1'b1;
	DI_expected[6] = #5000 1'b0;
	DI_expected[6] = #25000 1'b1;
	DI_expected[6] = #10000 1'b0;
	DI_expected[6] = #90000 1'b1;
	DI_expected[6] = #5000 1'b0;
end 
// expected DI[ 5 ]
initial
begin
	DI_expected[5] = 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'bX;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #10000 1'b0;
	DI_expected[5] = #10000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #105000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #25000 1'b1;
	DI_expected[5] = #20000 1'b0;
	DI_expected[5] = #45000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #20000 1'b1;
	DI_expected[5] = #5000 1'b0;
	DI_expected[5] = #5000 1'b1;
	DI_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		DI_expected[5] = 1'b1;
		DI_expected[5] = #20000 1'b0;
		DI_expected[5] = #45000 1'b1;
		DI_expected[5] = #5000 1'b0;
		DI_expected[5] = #5000 1'b1;
		DI_expected[5] = #5000 1'b0;
		# 50000;
	end
	DI_expected[5] = 1'b1;
end 
// expected DI[ 4 ]
initial
begin
	DI_expected[4] = 1'b0;
	DI_expected[4] = #40000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #90000 1'bX;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #30000 1'b0;
	DI_expected[4] = #10000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #70000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #80000 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
	DI_expected[4] = #20000 1'b1;
	DI_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		DI_expected[4] = 1'b1;
		DI_expected[4] = #5000 1'b0;
		DI_expected[4] = #5000 1'b1;
		DI_expected[4] = #10000 1'b0;
		DI_expected[4] = #20000 1'b1;
		DI_expected[4] = #10000 1'b0;
		# 80000;
	end
	DI_expected[4] = 1'b1;
	DI_expected[4] = #5000 1'b0;
	DI_expected[4] = #5000 1'b1;
	DI_expected[4] = #10000 1'b0;
end 
// expected DI[ 3 ]
initial
begin
	DI_expected[3] = 1'b0;
	DI_expected[3] = #45000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
	DI_expected[3] = #20000 1'b0;
	DI_expected[3] = #20000 1'bX;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #30000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #25000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #75000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #115000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #20000 1'b1;
	DI_expected[3] = #10000 1'b0;
	DI_expected[3] = #85000 1'b1;
	DI_expected[3] = #15000 1'b0;
	DI_expected[3] = #50000 1'b1;
end 
// expected DI[ 2 ]
initial
begin
	DI_expected[2] = 1'b0;
	DI_expected[2] = #40000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #70000 1'bX;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #20000 1'b1;
	DI_expected[2] = #30000 1'b0;
	DI_expected[2] = #10000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		DI_expected[2] = 1'b0;
		DI_expected[2] = #15000 1'b1;
		# 5000;
	end
	DI_expected[2] = 1'b0;
	DI_expected[2] = #70000 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		DI_expected[2] = 1'b1;
		DI_expected[2] = #5000 1'b0;
		DI_expected[2] = #5000 1'b1;
		DI_expected[2] = #10000 1'b0;
		DI_expected[2] = #15000 1'b1;
		DI_expected[2] = #15000 1'b0;
		DI_expected[2] = #20000 1'b1;
		DI_expected[2] = #20000 1'b0;
		# 40000;
	end
	DI_expected[2] = 1'b1;
	DI_expected[2] = #5000 1'b0;
	DI_expected[2] = #5000 1'b1;
	DI_expected[2] = #10000 1'b0;
	DI_expected[2] = #15000 1'b1;
	DI_expected[2] = #5000 1'b0;
end 
// expected DI[ 1 ]
initial
begin
	DI_expected[1] = 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #70000 1'bX;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #30000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #65000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #5000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #75000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #15000 1'b0;
	DI_expected[1] = #25000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #95000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #30000 1'b0;
	DI_expected[1] = #10000 1'b1;
	DI_expected[1] = #20000 1'b0;
	DI_expected[1] = #45000 1'b1;
	DI_expected[1] = #10000 1'b0;
	DI_expected[1] = #15000 1'b1;
	DI_expected[1] = #10000 1'b0;
end 
// expected DI[ 0 ]
initial
begin
	repeat(2)
	begin
		DI_expected[0] = 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		DI_expected[0] = #20000 1'b1;
		# 10000;
	end
	DI_expected[0] = 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #20000 1'bX;
	DI_expected[0] = #10000 1'b1;
	DI_expected[0] = #40000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		DI_expected[0] = 1'b1;
		DI_expected[0] = #10000 1'b0;
		DI_expected[0] = #40000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #25000 1'b1;
		DI_expected[0] = #5000 1'b0;
		DI_expected[0] = #5000 1'b1;
		DI_expected[0] = #20000 1'b0;
		# 20000;
	end
	DI_expected[0] = 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #45000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #20000 1'b0;
	DI_expected[0] = #20000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #40000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #25000 1'b1;
	DI_expected[0] = #5000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #10000 1'b0;
	DI_expected[0] = #5000 1'b1;
	DI_expected[0] = #5000 1'b0;
end 
// expected flagin[ 1 ]
initial
begin
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	# 120000;
	repeat(2)
	begin
		flagin_expected[1] = 1'b1;
		flagin_expected[1] = #40000 1'b0;
		flagin_expected[1] = #20000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		flagin_expected[1] = #30000 1'b1;
		flagin_expected[1] = #10000 1'b0;
		# 20000;
	end
	flagin_expected[1] = 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #20000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #30000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #40000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #10000 1'b0;
	flagin_expected[1] = #20000 1'b1;
	flagin_expected[1] = #5000 1'b0;
	flagin_expected[1] = #5000 1'b1;
	flagin_expected[1] = #10000 1'b0;
end 
// expected flagin[ 0 ]
initial
begin
	flagin_expected[0] = 1'bX;
	flagin_expected[0] = #40000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #200000 1'b1;
	flagin_expected[0] = #50000 1'b0;
	flagin_expected[0] = #5000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #35000 1'b1;
	flagin_expected[0] = #25000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #90000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #125000 1'b1;
	flagin_expected[0] = #5000 1'b0;
	flagin_expected[0] = #30000 1'b1;
	flagin_expected[0] = #30000 1'b0;
	flagin_expected[0] = #65000 1'b1;
	flagin_expected[0] = #5000 1'b0;
end 
// expected flagout[ 7 ]
initial
begin
	flagout_expected[7] = 1'b0;
end 
// expected flagout[ 6 ]
initial
begin
	flagout_expected[6] = 1'b0;
end 
// expected flagout[ 5 ]
initial
begin
	flagout_expected[5] = 1'b0;
end 
// expected flagout[ 4 ]
initial
begin
	flagout_expected[4] = 1'b0;
end 
// expected flagout[ 3 ]
initial
begin
	flagout_expected[3] = 1'b0;
end 
// expected flagout[ 2 ]
initial
begin
	flagout_expected[2] = 1'b0;
end 
// expected flagout[ 1 ]
initial
begin
	flagout_expected[1] = 1'b0;
	# 65000;
	repeat(12)
	begin
		repeat(4)
		begin
			flagout_expected[1] = 1'b1;
			flagout_expected[1] = #10000 1'b0;
			# 120000;
		end
		flagout_expected[1] = 1'b1;
		flagout_expected[1] = #10000 1'b0;
		# 250000;
	end
	repeat(4)
	begin
		flagout_expected[1] = 1'b1;
		flagout_expected[1] = #10000 1'b0;
		# 120000;
	end
	flagout_expected[1] = 1'b1;
	flagout_expected[1] = #10000 1'b0;
end 
// expected flagout[ 0 ]
initial
begin
	flagout_expected[0] = 1'b0;
	# 95000;
	repeat(12)
	begin
		flagout_expected[0] = 1'b1;
		flagout_expected[0] = #80000 1'b0;
		flagout_expected[0] = #40000 1'b1;
		flagout_expected[0] = #10000 1'b0;
		# 650000;
	end
	flagout_expected[0] = 1'b1;
	flagout_expected[0] = #80000 1'b0;
	flagout_expected[0] = #40000 1'b1;
	flagout_expected[0] = #10000 1'b0;
end 
// expected instr[ 15 ]
initial
begin
	repeat(12)
	begin
		instr_expected[15] = 1'b1;
		# 80000;
		repeat(4)
		begin
			instr_expected[15] = 1'b0;
			instr_expected[15] = #20000 1'b1;
			# 110000;
		end
		instr_expected[15] = 1'b0;
		instr_expected[15] = #20000 1'b1;
		instr_expected[15] = #150000 1'b0;
		# 10000;
	end
	instr_expected[15] = 1'b1;
	# 80000;
	repeat(4)
	begin
		instr_expected[15] = 1'b0;
		instr_expected[15] = #20000 1'b1;
		# 110000;
	end
	instr_expected[15] = 1'b0;
	instr_expected[15] = #20000 1'b1;
end 
// expected instr[ 14 ]
initial
begin
	repeat(12)
	begin
		repeat(2)
		begin
			instr_expected[14] = 1'b0;
			instr_expected[14] = #90000 1'b1;
			instr_expected[14] = #10000 1'b0;
			instr_expected[14] = #10000 1'b1;
			# 20000;
		end
		repeat(2)
		begin
			instr_expected[14] = 1'b0;
			instr_expected[14] = #110000 1'b1;
			# 20000;
		end
		instr_expected[14] = 1'b0;
		instr_expected[14] = #80000 1'b1;
		instr_expected[14] = #20000 1'b0;
		instr_expected[14] = #10000 1'b1;
		instr_expected[14] = #20000 1'b0;
		instr_expected[14] = #120000 1'b1;
		# 10000;
	end
	repeat(2)
	begin
		instr_expected[14] = 1'b0;
		instr_expected[14] = #90000 1'b1;
		instr_expected[14] = #10000 1'b0;
		instr_expected[14] = #10000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		instr_expected[14] = 1'b0;
		instr_expected[14] = #110000 1'b1;
		# 20000;
	end
	instr_expected[14] = 1'b0;
	instr_expected[14] = #80000 1'b1;
	instr_expected[14] = #20000 1'b0;
	instr_expected[14] = #10000 1'b1;
end 
// expected instr[ 13 ]
initial
begin
	repeat(12)
	begin
		instr_expected[13] = 1'b0;
		instr_expected[13] = #40000 1'b1;
		instr_expected[13] = #60000 1'b0;
		instr_expected[13] = #70000 1'b1;
		instr_expected[13] = #50000 1'b0;
		# 80000;
		repeat(2)
		begin
			instr_expected[13] = 1'b1;
			instr_expected[13] = #40000 1'b0;
			# 90000;
		end
		instr_expected[13] = 1'b1;
		instr_expected[13] = #40000 1'b0;
		instr_expected[13] = #60000 1'b1;
		# 120000;
	end
	instr_expected[13] = 1'b0;
	instr_expected[13] = #40000 1'b1;
	instr_expected[13] = #60000 1'b0;
	instr_expected[13] = #70000 1'b1;
	instr_expected[13] = #50000 1'b0;
	# 80000;
	repeat(2)
	begin
		instr_expected[13] = 1'b1;
		instr_expected[13] = #40000 1'b0;
		# 90000;
	end
	instr_expected[13] = 1'b1;
	instr_expected[13] = #40000 1'b0;
end 
// expected instr[ 12 ]
initial
begin
	repeat(12)
	begin
		instr_expected[12] = 1'b0;
		instr_expected[12] = #210000 1'b1;
		instr_expected[12] = #20000 1'b0;
		instr_expected[12] = #240000 1'b1;
		instr_expected[12] = #20000 1'b0;
		instr_expected[12] = #180000 1'b1;
		# 110000;
	end
	instr_expected[12] = 1'b0;
	instr_expected[12] = #210000 1'b1;
	instr_expected[12] = #20000 1'b0;
	instr_expected[12] = #240000 1'b1;
	instr_expected[12] = #20000 1'b0;
end 
// expected instr[ 11 ]
initial
begin
	repeat(2)
	begin
		instr_expected[11] = 1'b0;
		instr_expected[11] = #20000 1'b1;
		# 20000;
	end
	repeat(3)
	begin
		instr_expected[11] = 1'b0;
		instr_expected[11] = #10000 1'b1;
		instr_expected[11] = #10000 1'b0;
		instr_expected[11] = #50000 1'b1;
		instr_expected[11] = #20000 1'b0;
		instr_expected[11] = #20000 1'b1;
		# 20000;
	end
	instr_expected[11] = 1'b0;
	instr_expected[11] = #10000 1'b1;
	instr_expected[11] = #10000 1'b0;
	# 50000;
	repeat(12)
	begin
		instr_expected[11] = 1'b1;
		instr_expected[11] = #20000 1'b0;
		instr_expected[11] = #20000 1'b1;
		instr_expected[11] = #30000 1'b0;
		instr_expected[11] = #40000 1'b1;
		instr_expected[11] = #120000 1'b0;
		# 30000;
		repeat(4)
		begin
			instr_expected[11] = 1'b1;
			instr_expected[11] = #20000 1'b0;
			instr_expected[11] = #20000 1'b1;
			instr_expected[11] = #20000 1'b0;
			instr_expected[11] = #10000 1'b1;
			instr_expected[11] = #10000 1'b0;
			# 50000;
		end
	end
	instr_expected[11] = 1'b1;
	instr_expected[11] = #20000 1'b0;
	instr_expected[11] = #20000 1'b1;
	instr_expected[11] = #30000 1'b0;
end 
// expected instr[ 10 ]
initial
begin
	repeat(4)
	begin
		repeat(4)
		begin
			instr_expected[10] = 1'b0;
			instr_expected[10] = #10000 1'b1;
			# 10000;
		end
		instr_expected[10] = 1'b0;
		instr_expected[10] = #20000 1'b1;
		# 30000;
	end
	repeat(4)
	begin
		instr_expected[10] = 1'b0;
		instr_expected[10] = #10000 1'b1;
		# 10000;
	end
	repeat(12)
	begin
		instr_expected[10] = 1'b0;
		instr_expected[10] = #20000 1'b1;
		instr_expected[10] = #150000 1'b0;
		# 20000;
		repeat(3)
		begin
			instr_expected[10] = 1'b1;
			instr_expected[10] = #10000 1'b0;
			# 10000;
		end
		instr_expected[10] = 1'b1;
		# 10000;
		repeat(4)
		begin
			instr_expected[10] = 1'b0;
			instr_expected[10] = #20000 1'b1;
			# 30000;
			repeat(4)
			begin
				instr_expected[10] = 1'b0;
				instr_expected[10] = #10000 1'b1;
				# 10000;
			end
		end
	end
	instr_expected[10] = 1'b0;
	instr_expected[10] = #20000 1'b1;
end 
// expected instr[ 9 ]
initial
begin
	repeat(2)
	begin
		instr_expected[9] = 1'b0;
		instr_expected[9] = #20000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		instr_expected[9] = 1'b0;
		# 10000;
		repeat(2)
		begin
			instr_expected[9] = 1'b1;
			instr_expected[9] = #10000 1'b0;
			# 20000;
		end
		instr_expected[9] = 1'b1;
		instr_expected[9] = #20000 1'b0;
		instr_expected[9] = #20000 1'b1;
		# 20000;
	end
	instr_expected[9] = 1'b0;
	# 10000;
	repeat(2)
	begin
		instr_expected[9] = 1'b1;
		instr_expected[9] = #10000 1'b0;
		# 20000;
	end
	instr_expected[9] = 1'b1;
	instr_expected[9] = #20000 1'b0;
	instr_expected[9] = #20000 1'b1;
	instr_expected[9] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		instr_expected[9] = 1'b1;
		instr_expected[9] = #10000 1'b0;
		# 20000;
	end
	repeat(12)
	begin
		instr_expected[9] = 1'b1;
		instr_expected[9] = #20000 1'b0;
		instr_expected[9] = #20000 1'b1;
		instr_expected[9] = #30000 1'b0;
		instr_expected[9] = #30000 1'b1;
		instr_expected[9] = #30000 1'b0;
		# 130000;
		repeat(4)
		begin
			instr_expected[9] = 1'b1;
			instr_expected[9] = #20000 1'b0;
			instr_expected[9] = #20000 1'b1;
			instr_expected[9] = #20000 1'b0;
			# 10000;
			repeat(2)
			begin
				instr_expected[9] = 1'b1;
				instr_expected[9] = #10000 1'b0;
				# 20000;
			end
		end
	end
	instr_expected[9] = 1'b1;
	instr_expected[9] = #20000 1'b0;
	instr_expected[9] = #20000 1'b1;
	instr_expected[9] = #30000 1'b0;
end 
// expected instr[ 8 ]
initial
begin
	repeat(3)
	begin
		instr_expected[8] = 1'b0;
		instr_expected[8] = #10000 1'b1;
		# 10000;
	end
	instr_expected[8] = 1'b0;
	# 10000;
	repeat(4)
	begin
		instr_expected[8] = 1'b1;
		instr_expected[8] = #40000 1'b0;
		# 30000;
		repeat(3)
		begin
			instr_expected[8] = 1'b1;
			instr_expected[8] = #10000 1'b0;
			# 10000;
		end
	end
	repeat(12)
	begin
		instr_expected[8] = 1'b1;
		instr_expected[8] = #40000 1'b0;
		instr_expected[8] = #20000 1'b1;
		# 20000;
		repeat(5)
		begin
			instr_expected[8] = 1'b0;
			instr_expected[8] = #10000 1'b1;
			# 10000;
		end
		instr_expected[8] = 1'b0;
		# 20000;
		repeat(4)
		begin
			repeat(3)
			begin
				instr_expected[8] = 1'b1;
				instr_expected[8] = #10000 1'b0;
				# 10000;
			end
			instr_expected[8] = 1'b1;
			instr_expected[8] = #40000 1'b0;
			# 30000;
		end
		repeat(3)
		begin
			instr_expected[8] = 1'b1;
			instr_expected[8] = #10000 1'b0;
			# 10000;
		end
	end
	instr_expected[8] = 1'b1;
	instr_expected[8] = #40000 1'b0;
end 
// expected instr[ 7 ]
initial
begin
	repeat(2)
	begin
		instr_expected[7] = 1'b0;
		instr_expected[7] = #40000 1'b1;
		# 10000;
	end
	repeat(3)
	begin
		instr_expected[7] = 1'b0;
		instr_expected[7] = #70000 1'b1;
		instr_expected[7] = #10000 1'b0;
		instr_expected[7] = #40000 1'b1;
		# 10000;
	end
	instr_expected[7] = 1'b0;
	# 70000;
	repeat(12)
	begin
		instr_expected[7] = 1'b1;
		instr_expected[7] = #10000 1'b0;
		instr_expected[7] = #30000 1'b1;
		instr_expected[7] = #10000 1'b0;
		# 210000;
		repeat(4)
		begin
			instr_expected[7] = 1'b1;
			instr_expected[7] = #10000 1'b0;
			instr_expected[7] = #40000 1'b1;
			instr_expected[7] = #10000 1'b0;
			# 70000;
		end
	end
	repeat(2)
	begin
		instr_expected[7] = 1'b1;
		instr_expected[7] = #10000 1'b0;
		# 30000;
	end
end 
// expected instr[ 6 ]
initial
begin
	instr_expected[6] = 1'b0;
	# 50000;
	repeat(12)
	begin
		repeat(4)
		begin
			instr_expected[6] = 1'b1;
			instr_expected[6] = #10000 1'b0;
			# 120000;
		end
		instr_expected[6] = 1'b1;
		instr_expected[6] = #10000 1'b0;
		# 250000;
	end
	repeat(4)
	begin
		instr_expected[6] = 1'b1;
		instr_expected[6] = #10000 1'b0;
		# 120000;
	end
	instr_expected[6] = 1'b1;
	instr_expected[6] = #10000 1'b0;
end 
// expected instr[ 5 ]
initial
begin
	repeat(5)
	begin
		instr_expected[5] = 1'b0;
		instr_expected[5] = #110000 1'b1;
		# 20000;
	end
	repeat(10)
	begin
		instr_expected[5] = 1'b0;
		instr_expected[5] = #10000 1'b1;
		instr_expected[5] = #10000 1'b0;
		# 220000;
		repeat(4)
		begin
			instr_expected[5] = 1'b1;
			instr_expected[5] = #20000 1'b0;
			# 110000;
		end
		instr_expected[5] = 1'b1;
		# 20000;
	end
	instr_expected[5] = 1'b0;
	instr_expected[5] = #10000 1'b1;
	instr_expected[5] = #10000 1'b0;
	# 220000;
	repeat(4)
	begin
		instr_expected[5] = 1'b1;
		instr_expected[5] = #20000 1'b0;
		# 110000;
	end
	instr_expected[5] = 1'b1;
	instr_expected[5] = #20000 1'b0;
	instr_expected[5] = #10000 1'b1;
	instr_expected[5] = #10000 1'b0;
	# 220000;
	repeat(4)
	begin
		instr_expected[5] = 1'b1;
		instr_expected[5] = #20000 1'b0;
		# 110000;
	end
	instr_expected[5] = 1'b1;
end 
// expected instr[ 4 ]
initial
begin
	instr_expected[4] = 1'b0;
	# 40000;
	repeat(12)
	begin
		repeat(4)
		begin
			instr_expected[4] = 1'b1;
			instr_expected[4] = #20000 1'b0;
			# 110000;
		end
		instr_expected[4] = 1'b1;
		instr_expected[4] = #20000 1'b0;
		# 240000;
	end
	repeat(4)
	begin
		instr_expected[4] = 1'b1;
		instr_expected[4] = #20000 1'b0;
		# 110000;
	end
	instr_expected[4] = 1'b1;
	instr_expected[4] = #20000 1'b0;
end 
// expected instr[ 3 ]
initial
begin
	instr_expected[3] = 1'b0;
	# 50000;
	repeat(12)
	begin
		repeat(4)
		begin
			instr_expected[3] = 1'b1;
			instr_expected[3] = #10000 1'b0;
			# 120000;
		end
		instr_expected[3] = 1'b1;
		instr_expected[3] = #10000 1'b0;
		instr_expected[3] = #50000 1'b1;
		instr_expected[3] = #20000 1'b0;
		instr_expected[3] = #100000 1'b1;
		instr_expected[3] = #20000 1'b0;
		# 60000;
	end
	repeat(4)
	begin
		instr_expected[3] = 1'b1;
		instr_expected[3] = #10000 1'b0;
		# 120000;
	end
	instr_expected[3] = 1'b1;
	instr_expected[3] = #10000 1'b0;
	instr_expected[3] = #50000 1'b1;
end 
// expected instr[ 2 ]
initial
begin
	instr_expected[2] = 1'b0;
	# 40000;
	repeat(12)
	begin
		repeat(2)
		begin
			instr_expected[2] = 1'b1;
			instr_expected[2] = #20000 1'b0;
			# 110000;
		end
		repeat(2)
		begin
			instr_expected[2] = 1'b1;
			instr_expected[2] = #20000 1'b0;
			instr_expected[2] = #50000 1'b1;
			instr_expected[2] = #20000 1'b0;
			# 40000;
		end
		instr_expected[2] = 1'b1;
		instr_expected[2] = #20000 1'b0;
		instr_expected[2] = #130000 1'b1;
		instr_expected[2] = #40000 1'b0;
		# 70000;
	end
	repeat(2)
	begin
		instr_expected[2] = 1'b1;
		instr_expected[2] = #20000 1'b0;
		# 110000;
	end
	repeat(2)
	begin
		instr_expected[2] = 1'b1;
		instr_expected[2] = #20000 1'b0;
		instr_expected[2] = #50000 1'b1;
		instr_expected[2] = #20000 1'b0;
		# 40000;
	end
	instr_expected[2] = 1'b1;
	instr_expected[2] = #20000 1'b0;
end 
// expected instr[ 1 ]
initial
begin
	instr_expected[1] = 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #90000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #20000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #80000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #100000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #30000 1'b1;
	instr_expected[1] = #20000 1'b0;
	instr_expected[1] = #50000 1'b1;
	instr_expected[1] = #10000 1'b0;
	instr_expected[1] = #10000 1'b1;
	instr_expected[1] = #10000 1'b0;
end 
// expected instr[ 0 ]
initial
begin
	instr_expected[0] = 1'b0;
	# 40000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #40000 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 10000;
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	# 50000;
	repeat(4)
	begin
		instr_expected[0] = 1'b1;
		instr_expected[0] = #10000 1'b0;
		# 20000;
		repeat(2)
		begin
			instr_expected[0] = 1'b1;
			instr_expected[0] = #10000 1'b0;
			# 40000;
		end
	end
	instr_expected[0] = 1'b1;
	instr_expected[0] = #10000 1'b0;
	instr_expected[0] = #20000 1'b1;
	instr_expected[0] = #10000 1'b0;
end 

// expected jump
initial
begin
	repeat(12)
	begin
		jump_expected = 1'b0;
		jump_expected = #770000 1'b1;
		# 10000;
	end
	jump_expected = 1'b0;
end 

// expected memtoreg
initial
begin
	memtoreg_expected = 1'b0;
	# 670000;
	repeat(11)
	begin
		memtoreg_expected = 1'b1;
		memtoreg_expected = #100000 1'b0;
		# 680000;
	end
	memtoreg_expected = 1'b1;
	memtoreg_expected = #100000 1'b0;
end 
// expected ND[ 7 ]
initial
begin
	ND_expected[7] = 1'b0;
end 
// expected ND[ 6 ]
initial
begin
	ND_expected[6] = 1'b0;
end 
// expected ND[ 5 ]
initial
begin
	ND_expected[5] = 1'b0;
end 
// expected ND[ 4 ]
initial
begin
	ND_expected[4] = 1'b0;
end 
// expected ND[ 3 ]
initial
begin
	ND_expected[3] = 1'b0;
end 
// expected ND[ 2 ]
initial
begin
	ND_expected[2] = 1'b0;
end 
// expected ND[ 1 ]
initial
begin
	repeat(2)
	begin
		ND_expected[1] = 1'b0;
		ND_expected[1] = #20000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		ND_expected[1] = 1'b0;
		# 10000;
		repeat(2)
		begin
			ND_expected[1] = 1'b1;
			ND_expected[1] = #10000 1'b0;
			# 20000;
		end
		ND_expected[1] = 1'b1;
		ND_expected[1] = #20000 1'b0;
		ND_expected[1] = #20000 1'b1;
		# 20000;
	end
	ND_expected[1] = 1'b0;
	# 10000;
	repeat(2)
	begin
		ND_expected[1] = 1'b1;
		ND_expected[1] = #10000 1'b0;
		# 20000;
	end
	ND_expected[1] = 1'b1;
	ND_expected[1] = #20000 1'b0;
	ND_expected[1] = #20000 1'b1;
	ND_expected[1] = #20000 1'b0;
	# 10000;
	repeat(2)
	begin
		ND_expected[1] = 1'b1;
		ND_expected[1] = #10000 1'b0;
		# 20000;
	end
	repeat(12)
	begin
		ND_expected[1] = 1'b1;
		ND_expected[1] = #20000 1'b0;
		ND_expected[1] = #20000 1'b1;
		ND_expected[1] = #30000 1'b0;
		ND_expected[1] = #30000 1'b1;
		ND_expected[1] = #30000 1'b0;
		# 130000;
		repeat(4)
		begin
			ND_expected[1] = 1'b1;
			ND_expected[1] = #20000 1'b0;
			ND_expected[1] = #20000 1'b1;
			ND_expected[1] = #20000 1'b0;
			# 10000;
			repeat(2)
			begin
				ND_expected[1] = 1'b1;
				ND_expected[1] = #10000 1'b0;
				# 20000;
			end
		end
	end
	ND_expected[1] = 1'b1;
	ND_expected[1] = #20000 1'b0;
	ND_expected[1] = #20000 1'b1;
	ND_expected[1] = #30000 1'b0;
end 
// expected ND[ 0 ]
initial
begin
	repeat(4)
	begin
		ND_expected[0] = 1'b0;
		ND_expected[0] = #10000 1'b1;
		# 10000;
	end
	repeat(4)
	begin
		ND_expected[0] = 1'b0;
		ND_expected[0] = #20000 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 30000;
		repeat(3)
		begin
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 10000;
		end
		ND_expected[0] = 1'b1;
		# 10000;
	end
	ND_expected[0] = 1'b0;
	ND_expected[0] = #20000 1'b1;
	ND_expected[0] = #10000 1'b0;
	# 20000;
	repeat(10)
	begin
		ND_expected[0] = 1'b1;
		# 20000;
		repeat(5)
		begin
			ND_expected[0] = 1'b0;
			ND_expected[0] = #10000 1'b1;
			# 10000;
		end
		ND_expected[0] = 1'b0;
		# 20000;
		repeat(4)
		begin
			repeat(3)
			begin
				ND_expected[0] = 1'b1;
				ND_expected[0] = #10000 1'b0;
				# 10000;
			end
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			ND_expected[0] = #20000 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 30000;
		end
		repeat(3)
		begin
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 10000;
		end
		repeat(2)
		begin
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 20000;
		end
	end
	ND_expected[0] = 1'b1;
	# 20000;
	repeat(5)
	begin
		ND_expected[0] = 1'b0;
		ND_expected[0] = #10000 1'b1;
		# 10000;
	end
	ND_expected[0] = 1'b0;
	# 20000;
	repeat(4)
	begin
		repeat(3)
		begin
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 10000;
		end
		ND_expected[0] = 1'b1;
		ND_expected[0] = #10000 1'b0;
		ND_expected[0] = #20000 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 30000;
	end
	repeat(3)
	begin
		ND_expected[0] = 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 10000;
	end
	repeat(2)
	begin
		ND_expected[0] = 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 20000;
	end
	ND_expected[0] = 1'b1;
	# 20000;
	repeat(5)
	begin
		ND_expected[0] = 1'b0;
		ND_expected[0] = #10000 1'b1;
		# 10000;
	end
	ND_expected[0] = 1'b0;
	# 20000;
	repeat(4)
	begin
		repeat(3)
		begin
			ND_expected[0] = 1'b1;
			ND_expected[0] = #10000 1'b0;
			# 10000;
		end
		ND_expected[0] = 1'b1;
		ND_expected[0] = #10000 1'b0;
		ND_expected[0] = #20000 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 30000;
	end
	repeat(3)
	begin
		ND_expected[0] = 1'b1;
		ND_expected[0] = #10000 1'b0;
		# 10000;
	end
	ND_expected[0] = 1'b1;
	ND_expected[0] = #10000 1'b0;
	ND_expected[0] = #20000 1'b1;
	ND_expected[0] = #10000 1'b0;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'b0;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'b0;
	# 635000;
	repeat(12)
	begin
		pc_expected[6] = 1'b1;
		pc_expected[6] = #140000 1'b0;
		# 640000;
	end
	pc_expected[6] = 1'b1;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'b0;
	# 315000;
	repeat(12)
	begin
		pc_expected[5] = 1'b1;
		pc_expected[5] = #320000 1'b0;
		# 460000;
	end
	pc_expected[5] = 1'b1;
	pc_expected[5] = #320000 1'b0;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'b0;
	# 155000;
	repeat(12)
	begin
		pc_expected[4] = 1'b1;
		pc_expected[4] = #160000 1'b0;
		pc_expected[4] = #160000 1'b1;
		pc_expected[4] = #160000 1'b0;
		# 300000;
	end
	pc_expected[4] = 1'b1;
	pc_expected[4] = #160000 1'b0;
	pc_expected[4] = #160000 1'b1;
	pc_expected[4] = #160000 1'b0;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'b0;
	# 75000;
	repeat(4)
	begin
		pc_expected[3] = 1'b1;
		pc_expected[3] = #80000 1'b0;
		# 80000;
	end
	repeat(10)
	begin
		pc_expected[3] = 1'b1;
		# 60000;
		repeat(4)
		begin
			pc_expected[3] = 1'b0;
			pc_expected[3] = #80000 1'b1;
			# 80000;
		end
		pc_expected[3] = 1'b0;
		# 80000;
	end
	pc_expected[3] = 1'b1;
	# 60000;
	repeat(4)
	begin
		pc_expected[3] = 1'b0;
		pc_expected[3] = #80000 1'b1;
		# 80000;
	end
	pc_expected[3] = 1'b0;
	pc_expected[3] = #80000 1'b1;
	# 60000;
	repeat(4)
	begin
		pc_expected[3] = 1'b0;
		pc_expected[3] = #80000 1'b1;
		# 80000;
	end
	pc_expected[3] = 1'b0;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'b0;
	# 35000;
	repeat(9)
	begin
		pc_expected[2] = 1'b1;
		pc_expected[2] = #40000 1'b0;
		# 40000;
	end
	repeat(10)
	begin
		pc_expected[2] = 1'b1;
		# 20000;
		repeat(9)
		begin
			pc_expected[2] = 1'b0;
			pc_expected[2] = #40000 1'b1;
			# 40000;
		end
		pc_expected[2] = 1'b0;
		# 40000;
	end
	pc_expected[2] = 1'b1;
	# 20000;
	repeat(9)
	begin
		pc_expected[2] = 1'b0;
		pc_expected[2] = #40000 1'b1;
		# 40000;
	end
	pc_expected[2] = 1'b0;
	pc_expected[2] = #40000 1'b1;
	# 20000;
	repeat(8)
	begin
		pc_expected[2] = 1'b0;
		pc_expected[2] = #40000 1'b1;
		# 40000;
	end
	pc_expected[2] = 1'b0;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'b0;
	# 15000;
	repeat(12)
	begin
		repeat(18)
		begin
			pc_expected[1] = 1'b1;
			pc_expected[1] = #20000 1'b0;
			# 20000;
		end
		pc_expected[1] = 1'b1;
		pc_expected[1] = #20000 1'b0;
		# 40000;
	end
	repeat(15)
	begin
		pc_expected[1] = 1'b1;
		pc_expected[1] = #20000 1'b0;
		# 20000;
	end
	pc_expected[1] = 1'b1;
	pc_expected[1] = #20000 1'b0;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'b0;
	# 5000;
	repeat(499)
	begin
		pc_expected[0] = 1'b1;
		pc_expected[0] = #10000 1'b0;
		# 10000;
	end
	pc_expected[0] = 1'b1;
	pc_expected[0] = #10000 1'b0;
end 
// expected ram[ 7 ]
initial
begin
	ram_expected[7] = 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[7] = 1'b1;
		ram_expected[7] = #10000 1'b0;
		# 20000;
	end
	ram_expected[7] = 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #30000 1'bX;
	ram_expected[7] = #120000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #10000 1'b1;
	ram_expected[7] = #10000 1'bX;
	ram_expected[7] = #110000 1'b0;
	ram_expected[7] = #20000 1'bX;
	ram_expected[7] = #110000 1'b1;
	ram_expected[7] = #10000 1'b0;
	ram_expected[7] = #10000 1'bX;
end 
// expected ram[ 6 ]
initial
begin
	ram_expected[6] = 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	# 20000;
	repeat(2)
	begin
		ram_expected[6] = 1'b1;
		ram_expected[6] = #10000 1'b0;
		# 20000;
	end
	ram_expected[6] = 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #30000 1'bX;
	ram_expected[6] = #120000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #10000 1'b1;
	ram_expected[6] = #10000 1'bX;
	ram_expected[6] = #110000 1'b0;
	ram_expected[6] = #20000 1'bX;
	ram_expected[6] = #110000 1'b1;
	ram_expected[6] = #10000 1'b0;
	ram_expected[6] = #10000 1'bX;
end 
// expected ram[ 5 ]
initial
begin
	ram_expected[5] = 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(3)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
	ram_expected[5] = #20000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'b1;
	ram_expected[5] = #20000 1'b0;
	ram_expected[5] = #60000 1'bX;
	ram_expected[5] = #120000 1'b1;
	ram_expected[5] = #10000 1'b0;
	ram_expected[5] = #10000 1'bX;
	ram_expected[5] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[5] = 1'bX;
		ram_expected[5] = #110000 1'b0;
		# 20000;
	end
	ram_expected[5] = 1'bX;
end 
// expected ram[ 4 ]
initial
begin
	ram_expected[4] = 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
	ram_expected[4] = #110000 1'b0;
	ram_expected[4] = #20000 1'bX;
	ram_expected[4] = #20000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #30000 1'b0;
	ram_expected[4] = #10000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #30000 1'bX;
	ram_expected[4] = #120000 1'b1;
	ram_expected[4] = #10000 1'b0;
	ram_expected[4] = #10000 1'bX;
	ram_expected[4] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[4] = 1'bX;
		ram_expected[4] = #110000 1'b1;
		ram_expected[4] = #10000 1'b0;
		# 10000;
	end
	ram_expected[4] = 1'bX;
end 
// expected ram[ 3 ]
initial
begin
	ram_expected[3] = 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #20000 1'b0;
	ram_expected[3] = #30000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #20000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #30000 1'bX;
	ram_expected[3] = #120000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #10000 1'b1;
	ram_expected[3] = #10000 1'bX;
	ram_expected[3] = #110000 1'b0;
	ram_expected[3] = #20000 1'bX;
	ram_expected[3] = #110000 1'b1;
	ram_expected[3] = #10000 1'b0;
	ram_expected[3] = #10000 1'bX;
end 
// expected ram[ 2 ]
initial
begin
	ram_expected[2] = 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
	ram_expected[2] = #110000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #20000 1'b0;
	ram_expected[2] = #20000 1'b1;
	ram_expected[2] = #30000 1'b0;
	ram_expected[2] = #10000 1'b1;
	ram_expected[2] = #10000 1'b0;
	ram_expected[2] = #30000 1'bX;
	ram_expected[2] = #120000 1'b0;
	ram_expected[2] = #20000 1'bX;
	ram_expected[2] = #110000 1'b1;
	# 20000;
	repeat(2)
	begin
		ram_expected[2] = 1'bX;
		ram_expected[2] = #110000 1'b1;
		ram_expected[2] = #10000 1'b0;
		# 10000;
	end
	ram_expected[2] = 1'bX;
end 
// expected ram[ 1 ]
initial
begin
	ram_expected[1] = 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #20000 1'b1;
	ram_expected[1] = #30000 1'b0;
	ram_expected[1] = #30000 1'b1;
	ram_expected[1] = #20000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #120000 1'b1;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #10000 1'b0;
	ram_expected[1] = #10000 1'bX;
	ram_expected[1] = #110000 1'b0;
	ram_expected[1] = #20000 1'bX;
	ram_expected[1] = #110000 1'b1;
	ram_expected[1] = #20000 1'bX;
end 
// expected ram[ 0 ]
initial
begin
	ram_expected[0] = 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #40000 1'b0;
	ram_expected[0] = #20000 1'b1;
	ram_expected[0] = #20000 1'b0;
	ram_expected[0] = #10000 1'b1;
	ram_expected[0] = #10000 1'bX;
	# 120000;
	repeat(2)
	begin
		ram_expected[0] = 1'b1;
		ram_expected[0] = #20000 1'bX;
		# 110000;
	end
	ram_expected[0] = 1'b0;
	ram_expected[0] = #20000 1'bX;
	ram_expected[0] = #110000 1'b1;
	ram_expected[0] = #20000 1'bX;
end 

// expected reg_we
initial
begin
	repeat(12)
	begin
		repeat(5)
		begin
			reg_we_expected = 1'b1;
			reg_we_expected = #110000 1'b0;
			# 20000;
		end
		reg_we_expected = 1'b1;
		reg_we_expected = #120000 1'b0;
		# 10000;
	end
	repeat(4)
	begin
		reg_we_expected = 1'b1;
		reg_we_expected = #110000 1'b0;
		# 20000;
	end
	reg_we_expected = 1'b1;
	reg_we_expected = #110000 1'b0;
end 

// expected regdes
initial
begin
	regdes_expected = 1'b0;
	# 80000;
	repeat(12)
	begin
		repeat(4)
		begin
			regdes_expected = 1'b1;
			regdes_expected = #20000 1'b0;
			# 110000;
		end
		regdes_expected = 1'b1;
		regdes_expected = #20000 1'b0;
		# 240000;
	end
	repeat(4)
	begin
		regdes_expected = 1'b1;
		regdes_expected = #20000 1'b0;
		# 110000;
	end
	regdes_expected = 1'b1;
	regdes_expected = #20000 1'b0;
end 
// expected S[ 7 ]
initial
begin
	S_expected[7] = 1'b0;
	S_expected[7] = #40000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #240000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #85000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #25000 1'b1;
	S_expected[7] = #15000 1'b0;
	S_expected[7] = #70000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #110000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #20000 1'b1;
	S_expected[7] = #10000 1'b0;
	S_expected[7] = #80000 1'b1;
	S_expected[7] = #5000 1'b0;
	S_expected[7] = #10000 1'b1;
	S_expected[7] = #5000 1'b0;
end 
// expected S[ 6 ]
initial
begin
	S_expected[6] = 1'b0;
	S_expected[6] = #50000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[6] = 1'b0;
		S_expected[6] = #90000 1'b1;
		# 5000;
	end
	S_expected[6] = 1'b0;
	S_expected[6] = #160000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #30000 1'b1;
	S_expected[6] = #15000 1'b0;
	S_expected[6] = #80000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #125000 1'b1;
	S_expected[6] = #5000 1'b0;
	S_expected[6] = #25000 1'b1;
	S_expected[6] = #10000 1'b0;
	S_expected[6] = #90000 1'b1;
	S_expected[6] = #5000 1'b0;
end 
// expected S[ 5 ]
initial
begin
	S_expected[5] = 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #10000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #100000 1'b0;
	S_expected[5] = #55000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #25000 1'b1;
	S_expected[5] = #20000 1'b0;
	S_expected[5] = #45000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #20000 1'b1;
	S_expected[5] = #5000 1'b0;
	S_expected[5] = #5000 1'b1;
	S_expected[5] = #10000 1'b0;
	# 10000;
	repeat(3)
	begin
		S_expected[5] = 1'b1;
		S_expected[5] = #20000 1'b0;
		S_expected[5] = #45000 1'b1;
		S_expected[5] = #5000 1'b0;
		S_expected[5] = #5000 1'b1;
		S_expected[5] = #5000 1'b0;
		# 50000;
	end
	S_expected[5] = 1'b1;
end 
// expected S[ 4 ]
initial
begin
	S_expected[4] = 1'b0;
	S_expected[4] = #40000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #240000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #80000 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
	S_expected[4] = #20000 1'b1;
	S_expected[4] = #20000 1'b0;
	# 70000;
	repeat(2)
	begin
		S_expected[4] = 1'b1;
		S_expected[4] = #5000 1'b0;
		S_expected[4] = #5000 1'b1;
		S_expected[4] = #10000 1'b0;
		S_expected[4] = #20000 1'b1;
		S_expected[4] = #10000 1'b0;
		# 80000;
	end
	S_expected[4] = 1'b1;
	S_expected[4] = #5000 1'b0;
	S_expected[4] = #5000 1'b1;
	S_expected[4] = #10000 1'b0;
end 
// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'b0;
	S_expected[3] = #45000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #100000 1'b1;
	S_expected[3] = #20000 1'b0;
	S_expected[3] = #55000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #25000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #75000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #115000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #20000 1'b1;
	S_expected[3] = #10000 1'b0;
	S_expected[3] = #85000 1'b1;
	S_expected[3] = #15000 1'b0;
	S_expected[3] = #50000 1'b1;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'b0;
	S_expected[2] = #40000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #110000 1'b1;
	S_expected[2] = #40000 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	# 10000;
	repeat(2)
	begin
		S_expected[2] = 1'b0;
		S_expected[2] = #15000 1'b1;
		# 5000;
	end
	S_expected[2] = 1'b0;
	S_expected[2] = #70000 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #5000 1'b0;
	# 75000;
	repeat(2)
	begin
		S_expected[2] = 1'b1;
		S_expected[2] = #5000 1'b0;
		S_expected[2] = #5000 1'b1;
		S_expected[2] = #10000 1'b0;
		S_expected[2] = #15000 1'b1;
		S_expected[2] = #15000 1'b0;
		S_expected[2] = #20000 1'b1;
		S_expected[2] = #20000 1'b0;
		# 40000;
	end
	S_expected[2] = 1'b1;
	S_expected[2] = #5000 1'b0;
	S_expected[2] = #5000 1'b1;
	S_expected[2] = #10000 1'b0;
	S_expected[2] = #15000 1'b1;
	S_expected[2] = #5000 1'b0;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #90000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #20000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #5000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #75000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #15000 1'b0;
	S_expected[1] = #25000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #95000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #30000 1'b0;
	S_expected[1] = #10000 1'b1;
	S_expected[1] = #20000 1'b0;
	S_expected[1] = #45000 1'b1;
	S_expected[1] = #10000 1'b0;
	S_expected[1] = #15000 1'b1;
	S_expected[1] = #10000 1'b0;
end 
// expected S[ 0 ]
initial
begin
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	# 30000;
	repeat(4)
	begin
		S_expected[0] = 1'b1;
		S_expected[0] = #10000 1'b0;
		# 10000;
	end
	S_expected[0] = 1'b1;
	# 20000;
	repeat(2)
	begin
		S_expected[0] = 1'b0;
		S_expected[0] = #40000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #25000 1'b1;
		S_expected[0] = #5000 1'b0;
		S_expected[0] = #5000 1'b1;
		S_expected[0] = #20000 1'b0;
		S_expected[0] = #20000 1'b1;
		# 10000;
	end
	S_expected[0] = 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #45000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #20000 1'b0;
	S_expected[0] = #20000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #40000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #25000 1'b1;
	S_expected[0] = #5000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #10000 1'b0;
	S_expected[0] = #5000 1'b1;
	S_expected[0] = #5000 1'b0;
end 

// expected wrflag
initial
begin
	wrflag_expected = 1'b0;
	# 40000;
	repeat(12)
	begin
		repeat(2)
		begin
			wrflag_expected = 1'b1;
			wrflag_expected = #60000 1'b0;
			# 70000;
		end
		repeat(2)
		begin
			wrflag_expected = 1'b1;
			wrflag_expected = #40000 1'b0;
			# 90000;
		end
		wrflag_expected = 1'b1;
		wrflag_expected = #40000 1'b0;
		wrflag_expected = #60000 1'b1;
		wrflag_expected = #10000 1'b0;
		# 150000;
	end
	repeat(2)
	begin
		wrflag_expected = 1'b1;
		wrflag_expected = #60000 1'b0;
		# 70000;
	end
	repeat(2)
	begin
		wrflag_expected = 1'b1;
		wrflag_expected = #40000 1'b0;
		# 90000;
	end
	wrflag_expected = 1'b1;
	wrflag_expected = #40000 1'b0;
end 

// expected writemem
initial
begin
	repeat(5)
	begin
		writemem_expected = 1'b0;
		writemem_expected = #110000 1'b1;
		# 20000;
	end
	repeat(10)
	begin
		writemem_expected = 1'b0;
		# 240000;
		repeat(4)
		begin
			writemem_expected = 1'b1;
			writemem_expected = #20000 1'b0;
			# 110000;
		end
		writemem_expected = 1'b1;
		# 20000;
	end
	writemem_expected = 1'b0;
	# 240000;
	repeat(4)
	begin
		writemem_expected = 1'b1;
		writemem_expected = #20000 1'b0;
		# 110000;
	end
	writemem_expected = 1'b1;
	writemem_expected = #20000 1'b0;
	# 240000;
	repeat(4)
	begin
		writemem_expected = 1'b1;
		writemem_expected = #20000 1'b0;
		# 110000;
	end
	writemem_expected = 1'b1;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// expected N1[ 1 ]
initial
begin
	N1_expected[1] = 1'bX;
end 
// expected N1[ 0 ]
initial
begin
	N1_expected[0] = 1'bX;
end 
// expected N2[ 1 ]
initial
begin
	N2_expected[1] = 1'bX;
end 
// expected N2[ 0 ]
initial
begin
	N2_expected[0] = 1'bX;
end 
// expected cs[ 3 ]
initial
begin
	cs_expected[3] = 1'bX;
end 
// expected cs[ 2 ]
initial
begin
	repeat(12)
	begin
		cs_expected[2] = 1'b0;
		cs_expected[2] = #90000 1'b1;
		cs_expected[2] = #10000 1'b0;
		cs_expected[2] = #120000 1'b1;
		cs_expected[2] = #10000 1'b0;
		cs_expected[2] = #370000 1'b1;
		cs_expected[2] = #20000 1'b0;
		cs_expected[2] = #150000 1'b1;
		# 10000;
	end
	cs_expected[2] = 1'b0;
	cs_expected[2] = #90000 1'b1;
	cs_expected[2] = #10000 1'b0;
	cs_expected[2] = #120000 1'b1;
	cs_expected[2] = #10000 1'b0;
	cs_expected[2] = #370000 1'b1;
	cs_expected[2] = #20000 1'b0;
end 
// expected cs[ 1 ]
initial
begin
	repeat(12)
	begin
		repeat(2)
		begin
			cs_expected[1] = 1'b0;
			cs_expected[1] = #40000 1'b1;
			cs_expected[1] = #50000 1'b0;
			cs_expected[1] = #20000 1'b1;
			# 20000;
		end
		repeat(2)
		begin
			cs_expected[1] = 1'b0;
			cs_expected[1] = #40000 1'b1;
			cs_expected[1] = #40000 1'b0;
			cs_expected[1] = #30000 1'b1;
			# 20000;
		end
		cs_expected[1] = 1'b0;
		cs_expected[1] = #40000 1'b1;
		cs_expected[1] = #60000 1'b0;
		cs_expected[1] = #10000 1'b1;
		cs_expected[1] = #20000 1'b0;
		cs_expected[1] = #10000 1'b1;
		# 120000;
	end
	repeat(2)
	begin
		cs_expected[1] = 1'b0;
		cs_expected[1] = #40000 1'b1;
		cs_expected[1] = #50000 1'b0;
		cs_expected[1] = #20000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		cs_expected[1] = 1'b0;
		cs_expected[1] = #40000 1'b1;
		cs_expected[1] = #40000 1'b0;
		cs_expected[1] = #30000 1'b1;
		# 20000;
	end
	cs_expected[1] = 1'b0;
	cs_expected[1] = #40000 1'b1;
	cs_expected[1] = #60000 1'b0;
	cs_expected[1] = #10000 1'b1;
end 
// expected cs[ 0 ]
initial
begin
	repeat(12)
	begin
		cs_expected[0] = 1'b0;
		cs_expected[0] = #210000 1'b1;
		cs_expected[0] = #20000 1'b0;
		cs_expected[0] = #240000 1'b1;
		cs_expected[0] = #20000 1'b0;
		cs_expected[0] = #280000 1'b1;
		# 10000;
	end
	cs_expected[0] = 1'b0;
	cs_expected[0] = #210000 1'b1;
	cs_expected[0] = #20000 1'b0;
	cs_expected[0] = #240000 1'b1;
	cs_expected[0] = #20000 1'b0;
end 
// expected data_inH[ 7 ]
initial
begin
	data_inH_expected[7] = 1'bX;
end 
// expected data_inH[ 6 ]
initial
begin
	data_inH_expected[6] = 1'bX;
end 
// expected data_inH[ 5 ]
initial
begin
	data_inH_expected[5] = 1'bX;
end 
// expected data_inH[ 4 ]
initial
begin
	data_inH_expected[4] = 1'bX;
end 
// expected data_inH[ 3 ]
initial
begin
	data_inH_expected[3] = 1'bX;
end 
// expected data_inH[ 2 ]
initial
begin
	data_inH_expected[2] = 1'bX;
end 
// expected data_inH[ 1 ]
initial
begin
	data_inH_expected[1] = 1'bX;
end 
// expected data_inH[ 0 ]
initial
begin
	data_inH_expected[0] = 1'bX;
end 
// expected data_inL[ 7 ]
initial
begin
	data_inL_expected[7] = 1'bX;
end 
// expected data_inL[ 6 ]
initial
begin
	data_inL_expected[6] = 1'bX;
end 
// expected data_inL[ 5 ]
initial
begin
	data_inL_expected[5] = 1'bX;
end 
// expected data_inL[ 4 ]
initial
begin
	data_inL_expected[4] = 1'bX;
end 
// expected data_inL[ 3 ]
initial
begin
	data_inL_expected[3] = 1'bX;
end 
// expected data_inL[ 2 ]
initial
begin
	data_inL_expected[2] = 1'bX;
end 
// expected data_inL[ 1 ]
initial
begin
	data_inL_expected[1] = 1'bX;
end 
// expected data_inL[ 0 ]
initial
begin
	data_inL_expected[0] = 1'bX;
end 
// expected IO0[ 7 ]
initial
begin
	IO0_expected[7] = 1'bX;
end 
// expected IO0[ 6 ]
initial
begin
	IO0_expected[6] = 1'bX;
end 
// expected IO0[ 5 ]
initial
begin
	IO0_expected[5] = 1'bX;
end 
// expected IO0[ 4 ]
initial
begin
	IO0_expected[4] = 1'bX;
end 
// expected IO0[ 3 ]
initial
begin
	IO0_expected[3] = 1'bX;
end 
// expected IO0[ 2 ]
initial
begin
	IO0_expected[2] = 1'bX;
end 
// expected IO0[ 1 ]
initial
begin
	IO0_expected[1] = 1'bX;
end 
// expected IO0[ 0 ]
initial
begin
	IO0_expected[0] = 1'bX;
end 
// expected IO1[ 7 ]
initial
begin
	IO1_expected[7] = 1'bX;
end 
// expected IO1[ 6 ]
initial
begin
	IO1_expected[6] = 1'bX;
end 
// expected IO1[ 5 ]
initial
begin
	IO1_expected[5] = 1'bX;
end 
// expected IO1[ 4 ]
initial
begin
	IO1_expected[4] = 1'bX;
end 
// expected IO1[ 3 ]
initial
begin
	IO1_expected[3] = 1'bX;
end 
// expected IO1[ 2 ]
initial
begin
	IO1_expected[2] = 1'bX;
end 
// expected IO1[ 1 ]
initial
begin
	IO1_expected[1] = 1'bX;
end 
// expected IO1[ 0 ]
initial
begin
	IO1_expected[0] = 1'bX;
end 
// expected num_C0[ 3 ]
initial
begin
	num_C0_expected[3] = 1'bX;
end 
// expected num_C0[ 2 ]
initial
begin
	num_C0_expected[2] = 1'bX;
end 
// expected num_C0[ 1 ]
initial
begin
	num_C0_expected[1] = 1'bX;
end 
// expected num_C0[ 0 ]
initial
begin
	num_C0_expected[0] = 1'bX;
end 
// expected num_C1[ 3 ]
initial
begin
	num_C1_expected[3] = 1'bX;
end 
// expected num_C1[ 2 ]
initial
begin
	num_C1_expected[2] = 1'bX;
end 
// expected num_C1[ 1 ]
initial
begin
	num_C1_expected[1] = 1'bX;
end 
// expected num_C1[ 0 ]
initial
begin
	num_C1_expected[0] = 1'bX;
end 
// expected num_C2[ 3 ]
initial
begin
	num_C2_expected[3] = 1'bX;
end 
// expected num_C2[ 2 ]
initial
begin
	num_C2_expected[2] = 1'bX;
end 
// expected num_C2[ 1 ]
initial
begin
	num_C2_expected[1] = 1'bX;
end 
// expected num_C2[ 0 ]
initial
begin
	num_C2_expected[0] = 1'bX;
end 
// expected num_C3[ 3 ]
initial
begin
	num_C3_expected[3] = 1'bX;
end 
// expected num_C3[ 2 ]
initial
begin
	num_C3_expected[2] = 1'bX;
end 
// expected num_C3[ 1 ]
initial
begin
	num_C3_expected[1] = 1'bX;
end 
// expected num_C3[ 0 ]
initial
begin
	num_C3_expected[0] = 1'bX;
end 

// expected sign
initial
begin
	sign_expected = 1'bX;
end 

// expected IO_read
initial
begin
	IO_read_expected = 1'bX;
end 

// expected q0
initial
begin
	q0_expected = 1'bX;
end 

// expected q3
initial
begin
	q3_expected = 1'bX;
end 

// expected q4
initial
begin
	q4_expected = 1'bX;
end 

// expected q5
initial
begin
	q5_expected = 1'bX;
end 

// expected q6
initial
begin
	q6_expected = 1'bX;
end 

// expected q7
initial
begin
	q7_expected = 1'bX;
end 

// expected Q10
initial
begin
	Q10_expected = 1'bX;
end 

// expected Q11
initial
begin
	Q11_expected = 1'bX;
end 

// expected Q12
initial
begin
	Q12_expected = 1'bX;
end 

// expected Q13
initial
begin
	Q13_expected = 1'bX;
end 

// expected Q14
initial
begin
	Q14_expected = 1'bX;
end 

// expected Q15
initial
begin
	Q15_expected = 1'bX;
end 

// expected Q16
initial
begin
	Q16_expected = 1'bX;
end 

// expected Q17
initial
begin
	Q17_expected = 1'bX;
end 

// expected Q20
initial
begin
	Q20_expected = 1'bX;
end 

// expected Q21
initial
begin
	Q21_expected = 1'bX;
end 

// expected Q22
initial
begin
	Q22_expected = 1'bX;
end 

// expected Q23
initial
begin
	Q23_expected = 1'bX;
end 

// expected Q24
initial
begin
	Q24_expected = 1'bX;
end 

// expected Q25
initial
begin
	Q25_expected = 1'bX;
end 

// expected Q26
initial
begin
	Q26_expected = 1'bX;
end 

// expected Q27
initial
begin
	Q27_expected = 1'bX;
end 
// generate trigger
always @(ALUSRCB_expected or ALUSRCB or branch_expected or branch or cs_expected or cs or data_inH_expected or data_inH or data_inL_expected or data_inL or DI_expected or DI or flagin_expected or flagin or flagout_expected or flagout or instr_expected or instr or IO0_expected or IO0 or IO1_expected or IO1 or IO_read_expected or IO_read or jump_expected or jump or memtoreg_expected or memtoreg or N1_expected or N1 or N2_expected or N2 or ND_expected or ND or num_C0_expected or num_C0 or num_C1_expected or num_C1 or num_C2_expected or num_C2 or num_C3_expected or num_C3 or pc_expected or pc or q0_expected or q0 or Q1_expected or Q1 or Q2_expected or Q2 or q3_expected or q3 or q4_expected or q4 or q5_expected or q5 or q6_expected or q6 or q7_expected or q7 or Q10_expected or Q10 or Q11_expected or Q11 or Q12_expected or Q12 or Q13_expected or Q13 or Q14_expected or Q14 or Q15_expected or Q15 or Q16_expected or Q16 or Q17_expected or Q17 or Q20_expected or Q20 or Q21_expected or Q21 or Q22_expected or Q22 or Q23_expected or Q23 or Q24_expected or Q24 or Q25_expected or Q25 or Q26_expected or Q26 or Q27_expected or Q27 or ram_expected or ram or reg_we_expected or reg_we or regdes_expected or regdes or result_expected or result or S_expected or S or sign_expected or sign or wrflag_expected or wrflag or writemem_expected or writemem)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUSRCB = %b | expected branch = %b | expected cs = %b | expected data_inH = %b | expected data_inL = %b | expected DI = %b | expected flagin = %b | expected flagout = %b | expected instr = %b | expected IO0 = %b | expected IO1 = %b | expected IO_read = %b | expected jump = %b | expected memtoreg = %b | expected N1 = %b | expected N2 = %b | expected ND = %b | expected num_C0 = %b | expected num_C1 = %b | expected num_C2 = %b | expected num_C3 = %b | expected pc = %b | expected q0 = %b | expected Q1 = %b | expected Q2 = %b | expected q3 = %b | expected q4 = %b | expected q5 = %b | expected q6 = %b | expected q7 = %b | expected Q10 = %b | expected Q11 = %b | expected Q12 = %b | expected Q13 = %b | expected Q14 = %b | expected Q15 = %b | expected Q16 = %b | expected Q17 = %b | expected Q20 = %b | expected Q21 = %b | expected Q22 = %b | expected Q23 = %b | expected Q24 = %b | expected Q25 = %b | expected Q26 = %b | expected Q27 = %b | expected ram = %b | expected reg_we = %b | expected regdes = %b | expected result = %b | expected S = %b | expected sign = %b | expected wrflag = %b | expected writemem = %b | ",ALUSRCB_expected_prev,branch_expected_prev,cs_expected_prev,data_inH_expected_prev,data_inL_expected_prev,DI_expected_prev,flagin_expected_prev,flagout_expected_prev,instr_expected_prev,IO0_expected_prev,IO1_expected_prev,IO_read_expected_prev,jump_expected_prev,memtoreg_expected_prev,N1_expected_prev,N2_expected_prev,ND_expected_prev,num_C0_expected_prev,num_C1_expected_prev,num_C2_expected_prev,num_C3_expected_prev,pc_expected_prev,q0_expected_prev,Q1_expected_prev,Q2_expected_prev,q3_expected_prev,q4_expected_prev,q5_expected_prev,q6_expected_prev,q7_expected_prev,Q10_expected_prev,Q11_expected_prev,Q12_expected_prev,Q13_expected_prev,Q14_expected_prev,Q15_expected_prev,Q16_expected_prev,Q17_expected_prev,Q20_expected_prev,Q21_expected_prev,Q22_expected_prev,Q23_expected_prev,Q24_expected_prev,Q25_expected_prev,Q26_expected_prev,Q27_expected_prev,ram_expected_prev,reg_we_expected_prev,regdes_expected_prev,result_expected_prev,S_expected_prev,sign_expected_prev,wrflag_expected_prev,writemem_expected_prev);
	$display("| real ALUSRCB = %b | real branch = %b | real cs = %b | real data_inH = %b | real data_inL = %b | real DI = %b | real flagin = %b | real flagout = %b | real instr = %b | real IO0 = %b | real IO1 = %b | real IO_read = %b | real jump = %b | real memtoreg = %b | real N1 = %b | real N2 = %b | real ND = %b | real num_C0 = %b | real num_C1 = %b | real num_C2 = %b | real num_C3 = %b | real pc = %b | real q0 = %b | real Q1 = %b | real Q2 = %b | real q3 = %b | real q4 = %b | real q5 = %b | real q6 = %b | real q7 = %b | real Q10 = %b | real Q11 = %b | real Q12 = %b | real Q13 = %b | real Q14 = %b | real Q15 = %b | real Q16 = %b | real Q17 = %b | real Q20 = %b | real Q21 = %b | real Q22 = %b | real Q23 = %b | real Q24 = %b | real Q25 = %b | real Q26 = %b | real Q27 = %b | real ram = %b | real reg_we = %b | real regdes = %b | real result = %b | real S = %b | real sign = %b | real wrflag = %b | real writemem = %b | ",ALUSRCB_prev,branch_prev,cs_prev,data_inH_prev,data_inL_prev,DI_prev,flagin_prev,flagout_prev,instr_prev,IO0_prev,IO1_prev,IO_read_prev,jump_prev,memtoreg_prev,N1_prev,N2_prev,ND_prev,num_C0_prev,num_C1_prev,num_C2_prev,num_C3_prev,pc_prev,q0_prev,Q1_prev,Q2_prev,q3_prev,q4_prev,q5_prev,q6_prev,q7_prev,Q10_prev,Q11_prev,Q12_prev,Q13_prev,Q14_prev,Q15_prev,Q16_prev,Q17_prev,Q20_prev,Q21_prev,Q22_prev,Q23_prev,Q24_prev,Q25_prev,Q26_prev,Q27_prev,ram_prev,reg_we_prev,regdes_prev,result_prev,S_prev,sign_prev,wrflag_prev,writemem_prev);
`endif
	if (
		( ALUSRCB_expected_prev !== 1'bx ) && ( ALUSRCB_prev !== ALUSRCB_expected_prev )
		&& ((ALUSRCB_expected_prev !== last_ALUSRCB_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSRCB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSRCB_expected_prev);
		$display ("     Real value = %b", ALUSRCB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUSRCB_exp = ALUSRCB_expected_prev;
	end
	if (
		( branch_expected_prev !== 1'bx ) && ( branch_prev !== branch_expected_prev )
		&& ((branch_expected_prev !== last_branch_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_expected_prev);
		$display ("     Real value = %b", branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_branch_exp = branch_expected_prev;
	end
	if (
		( cs_expected_prev[0] !== 1'bx ) && ( cs_prev[0] !== cs_expected_prev[0] )
		&& ((cs_expected_prev[0] !== last_cs_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cs_exp[0] = cs_expected_prev[0];
	end
	if (
		( cs_expected_prev[1] !== 1'bx ) && ( cs_prev[1] !== cs_expected_prev[1] )
		&& ((cs_expected_prev[1] !== last_cs_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cs_exp[1] = cs_expected_prev[1];
	end
	if (
		( cs_expected_prev[2] !== 1'bx ) && ( cs_prev[2] !== cs_expected_prev[2] )
		&& ((cs_expected_prev[2] !== last_cs_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cs_exp[2] = cs_expected_prev[2];
	end
	if (
		( cs_expected_prev[3] !== 1'bx ) && ( cs_prev[3] !== cs_expected_prev[3] )
		&& ((cs_expected_prev[3] !== last_cs_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs_expected_prev);
		$display ("     Real value = %b", cs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cs_exp[3] = cs_expected_prev[3];
	end
	if (
		( data_inH_expected_prev[0] !== 1'bx ) && ( data_inH_prev[0] !== data_inH_expected_prev[0] )
		&& ((data_inH_expected_prev[0] !== last_data_inH_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[0] = data_inH_expected_prev[0];
	end
	if (
		( data_inH_expected_prev[1] !== 1'bx ) && ( data_inH_prev[1] !== data_inH_expected_prev[1] )
		&& ((data_inH_expected_prev[1] !== last_data_inH_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[1] = data_inH_expected_prev[1];
	end
	if (
		( data_inH_expected_prev[2] !== 1'bx ) && ( data_inH_prev[2] !== data_inH_expected_prev[2] )
		&& ((data_inH_expected_prev[2] !== last_data_inH_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[2] = data_inH_expected_prev[2];
	end
	if (
		( data_inH_expected_prev[3] !== 1'bx ) && ( data_inH_prev[3] !== data_inH_expected_prev[3] )
		&& ((data_inH_expected_prev[3] !== last_data_inH_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[3] = data_inH_expected_prev[3];
	end
	if (
		( data_inH_expected_prev[4] !== 1'bx ) && ( data_inH_prev[4] !== data_inH_expected_prev[4] )
		&& ((data_inH_expected_prev[4] !== last_data_inH_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[4] = data_inH_expected_prev[4];
	end
	if (
		( data_inH_expected_prev[5] !== 1'bx ) && ( data_inH_prev[5] !== data_inH_expected_prev[5] )
		&& ((data_inH_expected_prev[5] !== last_data_inH_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[5] = data_inH_expected_prev[5];
	end
	if (
		( data_inH_expected_prev[6] !== 1'bx ) && ( data_inH_prev[6] !== data_inH_expected_prev[6] )
		&& ((data_inH_expected_prev[6] !== last_data_inH_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[6] = data_inH_expected_prev[6];
	end
	if (
		( data_inH_expected_prev[7] !== 1'bx ) && ( data_inH_prev[7] !== data_inH_expected_prev[7] )
		&& ((data_inH_expected_prev[7] !== last_data_inH_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inH[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inH_expected_prev);
		$display ("     Real value = %b", data_inH_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_data_inH_exp[7] = data_inH_expected_prev[7];
	end
	if (
		( data_inL_expected_prev[0] !== 1'bx ) && ( data_inL_prev[0] !== data_inL_expected_prev[0] )
		&& ((data_inL_expected_prev[0] !== last_data_inL_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[0] = data_inL_expected_prev[0];
	end
	if (
		( data_inL_expected_prev[1] !== 1'bx ) && ( data_inL_prev[1] !== data_inL_expected_prev[1] )
		&& ((data_inL_expected_prev[1] !== last_data_inL_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[1] = data_inL_expected_prev[1];
	end
	if (
		( data_inL_expected_prev[2] !== 1'bx ) && ( data_inL_prev[2] !== data_inL_expected_prev[2] )
		&& ((data_inL_expected_prev[2] !== last_data_inL_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[2] = data_inL_expected_prev[2];
	end
	if (
		( data_inL_expected_prev[3] !== 1'bx ) && ( data_inL_prev[3] !== data_inL_expected_prev[3] )
		&& ((data_inL_expected_prev[3] !== last_data_inL_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[3] = data_inL_expected_prev[3];
	end
	if (
		( data_inL_expected_prev[4] !== 1'bx ) && ( data_inL_prev[4] !== data_inL_expected_prev[4] )
		&& ((data_inL_expected_prev[4] !== last_data_inL_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[4] = data_inL_expected_prev[4];
	end
	if (
		( data_inL_expected_prev[5] !== 1'bx ) && ( data_inL_prev[5] !== data_inL_expected_prev[5] )
		&& ((data_inL_expected_prev[5] !== last_data_inL_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[5] = data_inL_expected_prev[5];
	end
	if (
		( data_inL_expected_prev[6] !== 1'bx ) && ( data_inL_prev[6] !== data_inL_expected_prev[6] )
		&& ((data_inL_expected_prev[6] !== last_data_inL_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[6] = data_inL_expected_prev[6];
	end
	if (
		( data_inL_expected_prev[7] !== 1'bx ) && ( data_inL_prev[7] !== data_inL_expected_prev[7] )
		&& ((data_inL_expected_prev[7] !== last_data_inL_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_inL[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_inL_expected_prev);
		$display ("     Real value = %b", data_inL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_inL_exp[7] = data_inL_expected_prev[7];
	end
	if (
		( DI_expected_prev[0] !== 1'bx ) && ( DI_prev[0] !== DI_expected_prev[0] )
		&& ((DI_expected_prev[0] !== last_DI_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[0] = DI_expected_prev[0];
	end
	if (
		( DI_expected_prev[1] !== 1'bx ) && ( DI_prev[1] !== DI_expected_prev[1] )
		&& ((DI_expected_prev[1] !== last_DI_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[1] = DI_expected_prev[1];
	end
	if (
		( DI_expected_prev[2] !== 1'bx ) && ( DI_prev[2] !== DI_expected_prev[2] )
		&& ((DI_expected_prev[2] !== last_DI_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[2] = DI_expected_prev[2];
	end
	if (
		( DI_expected_prev[3] !== 1'bx ) && ( DI_prev[3] !== DI_expected_prev[3] )
		&& ((DI_expected_prev[3] !== last_DI_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[3] = DI_expected_prev[3];
	end
	if (
		( DI_expected_prev[4] !== 1'bx ) && ( DI_prev[4] !== DI_expected_prev[4] )
		&& ((DI_expected_prev[4] !== last_DI_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[4] = DI_expected_prev[4];
	end
	if (
		( DI_expected_prev[5] !== 1'bx ) && ( DI_prev[5] !== DI_expected_prev[5] )
		&& ((DI_expected_prev[5] !== last_DI_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[5] = DI_expected_prev[5];
	end
	if (
		( DI_expected_prev[6] !== 1'bx ) && ( DI_prev[6] !== DI_expected_prev[6] )
		&& ((DI_expected_prev[6] !== last_DI_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[6] = DI_expected_prev[6];
	end
	if (
		( DI_expected_prev[7] !== 1'bx ) && ( DI_prev[7] !== DI_expected_prev[7] )
		&& ((DI_expected_prev[7] !== last_DI_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DI_expected_prev);
		$display ("     Real value = %b", DI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DI_exp[7] = DI_expected_prev[7];
	end
	if (
		( flagin_expected_prev[0] !== 1'bx ) && ( flagin_prev[0] !== flagin_expected_prev[0] )
		&& ((flagin_expected_prev[0] !== last_flagin_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagin[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagin_expected_prev);
		$display ("     Real value = %b", flagin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_flagin_exp[0] = flagin_expected_prev[0];
	end
	if (
		( flagin_expected_prev[1] !== 1'bx ) && ( flagin_prev[1] !== flagin_expected_prev[1] )
		&& ((flagin_expected_prev[1] !== last_flagin_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagin[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagin_expected_prev);
		$display ("     Real value = %b", flagin_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_flagin_exp[1] = flagin_expected_prev[1];
	end
	if (
		( flagout_expected_prev[0] !== 1'bx ) && ( flagout_prev[0] !== flagout_expected_prev[0] )
		&& ((flagout_expected_prev[0] !== last_flagout_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[0] = flagout_expected_prev[0];
	end
	if (
		( flagout_expected_prev[1] !== 1'bx ) && ( flagout_prev[1] !== flagout_expected_prev[1] )
		&& ((flagout_expected_prev[1] !== last_flagout_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[1] = flagout_expected_prev[1];
	end
	if (
		( flagout_expected_prev[2] !== 1'bx ) && ( flagout_prev[2] !== flagout_expected_prev[2] )
		&& ((flagout_expected_prev[2] !== last_flagout_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[2] = flagout_expected_prev[2];
	end
	if (
		( flagout_expected_prev[3] !== 1'bx ) && ( flagout_prev[3] !== flagout_expected_prev[3] )
		&& ((flagout_expected_prev[3] !== last_flagout_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[3] = flagout_expected_prev[3];
	end
	if (
		( flagout_expected_prev[4] !== 1'bx ) && ( flagout_prev[4] !== flagout_expected_prev[4] )
		&& ((flagout_expected_prev[4] !== last_flagout_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[4] = flagout_expected_prev[4];
	end
	if (
		( flagout_expected_prev[5] !== 1'bx ) && ( flagout_prev[5] !== flagout_expected_prev[5] )
		&& ((flagout_expected_prev[5] !== last_flagout_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[5] = flagout_expected_prev[5];
	end
	if (
		( flagout_expected_prev[6] !== 1'bx ) && ( flagout_prev[6] !== flagout_expected_prev[6] )
		&& ((flagout_expected_prev[6] !== last_flagout_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[6] = flagout_expected_prev[6];
	end
	if (
		( flagout_expected_prev[7] !== 1'bx ) && ( flagout_prev[7] !== flagout_expected_prev[7] )
		&& ((flagout_expected_prev[7] !== last_flagout_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flagout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flagout_expected_prev);
		$display ("     Real value = %b", flagout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_flagout_exp[7] = flagout_expected_prev[7];
	end
	if (
		( instr_expected_prev[0] !== 1'bx ) && ( instr_prev[0] !== instr_expected_prev[0] )
		&& ((instr_expected_prev[0] !== last_instr_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[0] = instr_expected_prev[0];
	end
	if (
		( instr_expected_prev[1] !== 1'bx ) && ( instr_prev[1] !== instr_expected_prev[1] )
		&& ((instr_expected_prev[1] !== last_instr_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[1] = instr_expected_prev[1];
	end
	if (
		( instr_expected_prev[2] !== 1'bx ) && ( instr_prev[2] !== instr_expected_prev[2] )
		&& ((instr_expected_prev[2] !== last_instr_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[2] = instr_expected_prev[2];
	end
	if (
		( instr_expected_prev[3] !== 1'bx ) && ( instr_prev[3] !== instr_expected_prev[3] )
		&& ((instr_expected_prev[3] !== last_instr_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[3] = instr_expected_prev[3];
	end
	if (
		( instr_expected_prev[4] !== 1'bx ) && ( instr_prev[4] !== instr_expected_prev[4] )
		&& ((instr_expected_prev[4] !== last_instr_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[4] = instr_expected_prev[4];
	end
	if (
		( instr_expected_prev[5] !== 1'bx ) && ( instr_prev[5] !== instr_expected_prev[5] )
		&& ((instr_expected_prev[5] !== last_instr_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[5] = instr_expected_prev[5];
	end
	if (
		( instr_expected_prev[6] !== 1'bx ) && ( instr_prev[6] !== instr_expected_prev[6] )
		&& ((instr_expected_prev[6] !== last_instr_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[6] = instr_expected_prev[6];
	end
	if (
		( instr_expected_prev[7] !== 1'bx ) && ( instr_prev[7] !== instr_expected_prev[7] )
		&& ((instr_expected_prev[7] !== last_instr_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[7] = instr_expected_prev[7];
	end
	if (
		( instr_expected_prev[8] !== 1'bx ) && ( instr_prev[8] !== instr_expected_prev[8] )
		&& ((instr_expected_prev[8] !== last_instr_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[8] = instr_expected_prev[8];
	end
	if (
		( instr_expected_prev[9] !== 1'bx ) && ( instr_prev[9] !== instr_expected_prev[9] )
		&& ((instr_expected_prev[9] !== last_instr_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[9] = instr_expected_prev[9];
	end
	if (
		( instr_expected_prev[10] !== 1'bx ) && ( instr_prev[10] !== instr_expected_prev[10] )
		&& ((instr_expected_prev[10] !== last_instr_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[10] = instr_expected_prev[10];
	end
	if (
		( instr_expected_prev[11] !== 1'bx ) && ( instr_prev[11] !== instr_expected_prev[11] )
		&& ((instr_expected_prev[11] !== last_instr_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[11] = instr_expected_prev[11];
	end
	if (
		( instr_expected_prev[12] !== 1'bx ) && ( instr_prev[12] !== instr_expected_prev[12] )
		&& ((instr_expected_prev[12] !== last_instr_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[12] = instr_expected_prev[12];
	end
	if (
		( instr_expected_prev[13] !== 1'bx ) && ( instr_prev[13] !== instr_expected_prev[13] )
		&& ((instr_expected_prev[13] !== last_instr_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[13] = instr_expected_prev[13];
	end
	if (
		( instr_expected_prev[14] !== 1'bx ) && ( instr_prev[14] !== instr_expected_prev[14] )
		&& ((instr_expected_prev[14] !== last_instr_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[14] = instr_expected_prev[14];
	end
	if (
		( instr_expected_prev[15] !== 1'bx ) && ( instr_prev[15] !== instr_expected_prev[15] )
		&& ((instr_expected_prev[15] !== last_instr_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instr_exp[15] = instr_expected_prev[15];
	end
	if (
		( IO0_expected_prev[0] !== 1'bx ) && ( IO0_prev[0] !== IO0_expected_prev[0] )
		&& ((IO0_expected_prev[0] !== last_IO0_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[0] = IO0_expected_prev[0];
	end
	if (
		( IO0_expected_prev[1] !== 1'bx ) && ( IO0_prev[1] !== IO0_expected_prev[1] )
		&& ((IO0_expected_prev[1] !== last_IO0_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[1] = IO0_expected_prev[1];
	end
	if (
		( IO0_expected_prev[2] !== 1'bx ) && ( IO0_prev[2] !== IO0_expected_prev[2] )
		&& ((IO0_expected_prev[2] !== last_IO0_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[2] = IO0_expected_prev[2];
	end
	if (
		( IO0_expected_prev[3] !== 1'bx ) && ( IO0_prev[3] !== IO0_expected_prev[3] )
		&& ((IO0_expected_prev[3] !== last_IO0_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[3] = IO0_expected_prev[3];
	end
	if (
		( IO0_expected_prev[4] !== 1'bx ) && ( IO0_prev[4] !== IO0_expected_prev[4] )
		&& ((IO0_expected_prev[4] !== last_IO0_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[4] = IO0_expected_prev[4];
	end
	if (
		( IO0_expected_prev[5] !== 1'bx ) && ( IO0_prev[5] !== IO0_expected_prev[5] )
		&& ((IO0_expected_prev[5] !== last_IO0_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[5] = IO0_expected_prev[5];
	end
	if (
		( IO0_expected_prev[6] !== 1'bx ) && ( IO0_prev[6] !== IO0_expected_prev[6] )
		&& ((IO0_expected_prev[6] !== last_IO0_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[6] = IO0_expected_prev[6];
	end
	if (
		( IO0_expected_prev[7] !== 1'bx ) && ( IO0_prev[7] !== IO0_expected_prev[7] )
		&& ((IO0_expected_prev[7] !== last_IO0_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO0_expected_prev);
		$display ("     Real value = %b", IO0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO0_exp[7] = IO0_expected_prev[7];
	end
	if (
		( IO1_expected_prev[0] !== 1'bx ) && ( IO1_prev[0] !== IO1_expected_prev[0] )
		&& ((IO1_expected_prev[0] !== last_IO1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[0] = IO1_expected_prev[0];
	end
	if (
		( IO1_expected_prev[1] !== 1'bx ) && ( IO1_prev[1] !== IO1_expected_prev[1] )
		&& ((IO1_expected_prev[1] !== last_IO1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[1] = IO1_expected_prev[1];
	end
	if (
		( IO1_expected_prev[2] !== 1'bx ) && ( IO1_prev[2] !== IO1_expected_prev[2] )
		&& ((IO1_expected_prev[2] !== last_IO1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[2] = IO1_expected_prev[2];
	end
	if (
		( IO1_expected_prev[3] !== 1'bx ) && ( IO1_prev[3] !== IO1_expected_prev[3] )
		&& ((IO1_expected_prev[3] !== last_IO1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[3] = IO1_expected_prev[3];
	end
	if (
		( IO1_expected_prev[4] !== 1'bx ) && ( IO1_prev[4] !== IO1_expected_prev[4] )
		&& ((IO1_expected_prev[4] !== last_IO1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[4] = IO1_expected_prev[4];
	end
	if (
		( IO1_expected_prev[5] !== 1'bx ) && ( IO1_prev[5] !== IO1_expected_prev[5] )
		&& ((IO1_expected_prev[5] !== last_IO1_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[5] = IO1_expected_prev[5];
	end
	if (
		( IO1_expected_prev[6] !== 1'bx ) && ( IO1_prev[6] !== IO1_expected_prev[6] )
		&& ((IO1_expected_prev[6] !== last_IO1_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[6] = IO1_expected_prev[6];
	end
	if (
		( IO1_expected_prev[7] !== 1'bx ) && ( IO1_prev[7] !== IO1_expected_prev[7] )
		&& ((IO1_expected_prev[7] !== last_IO1_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO1_expected_prev);
		$display ("     Real value = %b", IO1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IO1_exp[7] = IO1_expected_prev[7];
	end
	if (
		( IO_read_expected_prev !== 1'bx ) && ( IO_read_prev !== IO_read_expected_prev )
		&& ((IO_read_expected_prev !== last_IO_read_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_read_expected_prev);
		$display ("     Real value = %b", IO_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_IO_read_exp = IO_read_expected_prev;
	end
	if (
		( jump_expected_prev !== 1'bx ) && ( jump_prev !== jump_expected_prev )
		&& ((jump_expected_prev !== last_jump_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jump_expected_prev);
		$display ("     Real value = %b", jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_jump_exp = jump_expected_prev;
	end
	if (
		( memtoreg_expected_prev !== 1'bx ) && ( memtoreg_prev !== memtoreg_expected_prev )
		&& ((memtoreg_expected_prev !== last_memtoreg_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port memtoreg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", memtoreg_expected_prev);
		$display ("     Real value = %b", memtoreg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_memtoreg_exp = memtoreg_expected_prev;
	end
	if (
		( N1_expected_prev[0] !== 1'bx ) && ( N1_prev[0] !== N1_expected_prev[0] )
		&& ((N1_expected_prev[0] !== last_N1_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N1_expected_prev);
		$display ("     Real value = %b", N1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_N1_exp[0] = N1_expected_prev[0];
	end
	if (
		( N1_expected_prev[1] !== 1'bx ) && ( N1_prev[1] !== N1_expected_prev[1] )
		&& ((N1_expected_prev[1] !== last_N1_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N1_expected_prev);
		$display ("     Real value = %b", N1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_N1_exp[1] = N1_expected_prev[1];
	end
	if (
		( N2_expected_prev[0] !== 1'bx ) && ( N2_prev[0] !== N2_expected_prev[0] )
		&& ((N2_expected_prev[0] !== last_N2_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N2_expected_prev);
		$display ("     Real value = %b", N2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_N2_exp[0] = N2_expected_prev[0];
	end
	if (
		( N2_expected_prev[1] !== 1'bx ) && ( N2_prev[1] !== N2_expected_prev[1] )
		&& ((N2_expected_prev[1] !== last_N2_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N2_expected_prev);
		$display ("     Real value = %b", N2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_N2_exp[1] = N2_expected_prev[1];
	end
	if (
		( ND_expected_prev[0] !== 1'bx ) && ( ND_prev[0] !== ND_expected_prev[0] )
		&& ((ND_expected_prev[0] !== last_ND_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[0] = ND_expected_prev[0];
	end
	if (
		( ND_expected_prev[1] !== 1'bx ) && ( ND_prev[1] !== ND_expected_prev[1] )
		&& ((ND_expected_prev[1] !== last_ND_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[1] = ND_expected_prev[1];
	end
	if (
		( ND_expected_prev[2] !== 1'bx ) && ( ND_prev[2] !== ND_expected_prev[2] )
		&& ((ND_expected_prev[2] !== last_ND_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[2] = ND_expected_prev[2];
	end
	if (
		( ND_expected_prev[3] !== 1'bx ) && ( ND_prev[3] !== ND_expected_prev[3] )
		&& ((ND_expected_prev[3] !== last_ND_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[3] = ND_expected_prev[3];
	end
	if (
		( ND_expected_prev[4] !== 1'bx ) && ( ND_prev[4] !== ND_expected_prev[4] )
		&& ((ND_expected_prev[4] !== last_ND_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[4] = ND_expected_prev[4];
	end
	if (
		( ND_expected_prev[5] !== 1'bx ) && ( ND_prev[5] !== ND_expected_prev[5] )
		&& ((ND_expected_prev[5] !== last_ND_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[5] = ND_expected_prev[5];
	end
	if (
		( ND_expected_prev[6] !== 1'bx ) && ( ND_prev[6] !== ND_expected_prev[6] )
		&& ((ND_expected_prev[6] !== last_ND_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[6] = ND_expected_prev[6];
	end
	if (
		( ND_expected_prev[7] !== 1'bx ) && ( ND_prev[7] !== ND_expected_prev[7] )
		&& ((ND_expected_prev[7] !== last_ND_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ND[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ND_expected_prev);
		$display ("     Real value = %b", ND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ND_exp[7] = ND_expected_prev[7];
	end
	if (
		( num_C0_expected_prev[0] !== 1'bx ) && ( num_C0_prev[0] !== num_C0_expected_prev[0] )
		&& ((num_C0_expected_prev[0] !== last_num_C0_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C0_expected_prev);
		$display ("     Real value = %b", num_C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_num_C0_exp[0] = num_C0_expected_prev[0];
	end
	if (
		( num_C0_expected_prev[1] !== 1'bx ) && ( num_C0_prev[1] !== num_C0_expected_prev[1] )
		&& ((num_C0_expected_prev[1] !== last_num_C0_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C0_expected_prev);
		$display ("     Real value = %b", num_C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_num_C0_exp[1] = num_C0_expected_prev[1];
	end
	if (
		( num_C0_expected_prev[2] !== 1'bx ) && ( num_C0_prev[2] !== num_C0_expected_prev[2] )
		&& ((num_C0_expected_prev[2] !== last_num_C0_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C0_expected_prev);
		$display ("     Real value = %b", num_C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_num_C0_exp[2] = num_C0_expected_prev[2];
	end
	if (
		( num_C0_expected_prev[3] !== 1'bx ) && ( num_C0_prev[3] !== num_C0_expected_prev[3] )
		&& ((num_C0_expected_prev[3] !== last_num_C0_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C0_expected_prev);
		$display ("     Real value = %b", num_C0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_num_C0_exp[3] = num_C0_expected_prev[3];
	end
	if (
		( num_C1_expected_prev[0] !== 1'bx ) && ( num_C1_prev[0] !== num_C1_expected_prev[0] )
		&& ((num_C1_expected_prev[0] !== last_num_C1_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C1_expected_prev);
		$display ("     Real value = %b", num_C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_num_C1_exp[0] = num_C1_expected_prev[0];
	end
	if (
		( num_C1_expected_prev[1] !== 1'bx ) && ( num_C1_prev[1] !== num_C1_expected_prev[1] )
		&& ((num_C1_expected_prev[1] !== last_num_C1_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C1_expected_prev);
		$display ("     Real value = %b", num_C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_num_C1_exp[1] = num_C1_expected_prev[1];
	end
	if (
		( num_C1_expected_prev[2] !== 1'bx ) && ( num_C1_prev[2] !== num_C1_expected_prev[2] )
		&& ((num_C1_expected_prev[2] !== last_num_C1_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C1_expected_prev);
		$display ("     Real value = %b", num_C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_num_C1_exp[2] = num_C1_expected_prev[2];
	end
	if (
		( num_C1_expected_prev[3] !== 1'bx ) && ( num_C1_prev[3] !== num_C1_expected_prev[3] )
		&& ((num_C1_expected_prev[3] !== last_num_C1_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C1_expected_prev);
		$display ("     Real value = %b", num_C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_num_C1_exp[3] = num_C1_expected_prev[3];
	end
	if (
		( num_C2_expected_prev[0] !== 1'bx ) && ( num_C2_prev[0] !== num_C2_expected_prev[0] )
		&& ((num_C2_expected_prev[0] !== last_num_C2_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C2_expected_prev);
		$display ("     Real value = %b", num_C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_num_C2_exp[0] = num_C2_expected_prev[0];
	end
	if (
		( num_C2_expected_prev[1] !== 1'bx ) && ( num_C2_prev[1] !== num_C2_expected_prev[1] )
		&& ((num_C2_expected_prev[1] !== last_num_C2_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C2_expected_prev);
		$display ("     Real value = %b", num_C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_num_C2_exp[1] = num_C2_expected_prev[1];
	end
	if (
		( num_C2_expected_prev[2] !== 1'bx ) && ( num_C2_prev[2] !== num_C2_expected_prev[2] )
		&& ((num_C2_expected_prev[2] !== last_num_C2_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C2_expected_prev);
		$display ("     Real value = %b", num_C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_num_C2_exp[2] = num_C2_expected_prev[2];
	end
	if (
		( num_C2_expected_prev[3] !== 1'bx ) && ( num_C2_prev[3] !== num_C2_expected_prev[3] )
		&& ((num_C2_expected_prev[3] !== last_num_C2_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C2_expected_prev);
		$display ("     Real value = %b", num_C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_num_C2_exp[3] = num_C2_expected_prev[3];
	end
	if (
		( num_C3_expected_prev[0] !== 1'bx ) && ( num_C3_prev[0] !== num_C3_expected_prev[0] )
		&& ((num_C3_expected_prev[0] !== last_num_C3_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C3_expected_prev);
		$display ("     Real value = %b", num_C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_num_C3_exp[0] = num_C3_expected_prev[0];
	end
	if (
		( num_C3_expected_prev[1] !== 1'bx ) && ( num_C3_prev[1] !== num_C3_expected_prev[1] )
		&& ((num_C3_expected_prev[1] !== last_num_C3_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C3_expected_prev);
		$display ("     Real value = %b", num_C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_num_C3_exp[1] = num_C3_expected_prev[1];
	end
	if (
		( num_C3_expected_prev[2] !== 1'bx ) && ( num_C3_prev[2] !== num_C3_expected_prev[2] )
		&& ((num_C3_expected_prev[2] !== last_num_C3_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C3_expected_prev);
		$display ("     Real value = %b", num_C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_num_C3_exp[2] = num_C3_expected_prev[2];
	end
	if (
		( num_C3_expected_prev[3] !== 1'bx ) && ( num_C3_prev[3] !== num_C3_expected_prev[3] )
		&& ((num_C3_expected_prev[3] !== last_num_C3_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_C3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_C3_expected_prev);
		$display ("     Real value = %b", num_C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_num_C3_exp[3] = num_C3_expected_prev[3];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( q0_expected_prev !== 1'bx ) && ( q0_prev !== q0_expected_prev )
		&& ((q0_expected_prev !== last_q0_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q0_expected_prev);
		$display ("     Real value = %b", q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_q0_exp = q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end
	if (
		( q3_expected_prev !== 1'bx ) && ( q3_prev !== q3_expected_prev )
		&& ((q3_expected_prev !== last_q3_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q3_expected_prev);
		$display ("     Real value = %b", q3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_q3_exp = q3_expected_prev;
	end
	if (
		( q4_expected_prev !== 1'bx ) && ( q4_prev !== q4_expected_prev )
		&& ((q4_expected_prev !== last_q4_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q4_expected_prev);
		$display ("     Real value = %b", q4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_q4_exp = q4_expected_prev;
	end
	if (
		( q5_expected_prev !== 1'bx ) && ( q5_prev !== q5_expected_prev )
		&& ((q5_expected_prev !== last_q5_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q5_expected_prev);
		$display ("     Real value = %b", q5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_q5_exp = q5_expected_prev;
	end
	if (
		( q6_expected_prev !== 1'bx ) && ( q6_prev !== q6_expected_prev )
		&& ((q6_expected_prev !== last_q6_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q6_expected_prev);
		$display ("     Real value = %b", q6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_q6_exp = q6_expected_prev;
	end
	if (
		( q7_expected_prev !== 1'bx ) && ( q7_prev !== q7_expected_prev )
		&& ((q7_expected_prev !== last_q7_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q7_expected_prev);
		$display ("     Real value = %b", q7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_q7_exp = q7_expected_prev;
	end
	if (
		( Q10_expected_prev !== 1'bx ) && ( Q10_prev !== Q10_expected_prev )
		&& ((Q10_expected_prev !== last_Q10_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q10_expected_prev);
		$display ("     Real value = %b", Q10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_Q10_exp = Q10_expected_prev;
	end
	if (
		( Q11_expected_prev !== 1'bx ) && ( Q11_prev !== Q11_expected_prev )
		&& ((Q11_expected_prev !== last_Q11_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q11_expected_prev);
		$display ("     Real value = %b", Q11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_Q11_exp = Q11_expected_prev;
	end
	if (
		( Q12_expected_prev !== 1'bx ) && ( Q12_prev !== Q12_expected_prev )
		&& ((Q12_expected_prev !== last_Q12_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q12_expected_prev);
		$display ("     Real value = %b", Q12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_Q12_exp = Q12_expected_prev;
	end
	if (
		( Q13_expected_prev !== 1'bx ) && ( Q13_prev !== Q13_expected_prev )
		&& ((Q13_expected_prev !== last_Q13_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q13_expected_prev);
		$display ("     Real value = %b", Q13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_Q13_exp = Q13_expected_prev;
	end
	if (
		( Q14_expected_prev !== 1'bx ) && ( Q14_prev !== Q14_expected_prev )
		&& ((Q14_expected_prev !== last_Q14_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q14_expected_prev);
		$display ("     Real value = %b", Q14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_Q14_exp = Q14_expected_prev;
	end
	if (
		( Q15_expected_prev !== 1'bx ) && ( Q15_prev !== Q15_expected_prev )
		&& ((Q15_expected_prev !== last_Q15_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q15_expected_prev);
		$display ("     Real value = %b", Q15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_Q15_exp = Q15_expected_prev;
	end
	if (
		( Q16_expected_prev !== 1'bx ) && ( Q16_prev !== Q16_expected_prev )
		&& ((Q16_expected_prev !== last_Q16_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q16 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q16_expected_prev);
		$display ("     Real value = %b", Q16_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_Q16_exp = Q16_expected_prev;
	end
	if (
		( Q17_expected_prev !== 1'bx ) && ( Q17_prev !== Q17_expected_prev )
		&& ((Q17_expected_prev !== last_Q17_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q17_expected_prev);
		$display ("     Real value = %b", Q17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_Q17_exp = Q17_expected_prev;
	end
	if (
		( Q20_expected_prev !== 1'bx ) && ( Q20_prev !== Q20_expected_prev )
		&& ((Q20_expected_prev !== last_Q20_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q20 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q20_expected_prev);
		$display ("     Real value = %b", Q20_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_Q20_exp = Q20_expected_prev;
	end
	if (
		( Q21_expected_prev !== 1'bx ) && ( Q21_prev !== Q21_expected_prev )
		&& ((Q21_expected_prev !== last_Q21_exp) ||
			on_first_change[40])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q21 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q21_expected_prev);
		$display ("     Real value = %b", Q21_prev);
		nummismatches = nummismatches + 1;
		on_first_change[40] = 1'b0;
		last_Q21_exp = Q21_expected_prev;
	end
	if (
		( Q22_expected_prev !== 1'bx ) && ( Q22_prev !== Q22_expected_prev )
		&& ((Q22_expected_prev !== last_Q22_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q22 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q22_expected_prev);
		$display ("     Real value = %b", Q22_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_Q22_exp = Q22_expected_prev;
	end
	if (
		( Q23_expected_prev !== 1'bx ) && ( Q23_prev !== Q23_expected_prev )
		&& ((Q23_expected_prev !== last_Q23_exp) ||
			on_first_change[42])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q23 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q23_expected_prev);
		$display ("     Real value = %b", Q23_prev);
		nummismatches = nummismatches + 1;
		on_first_change[42] = 1'b0;
		last_Q23_exp = Q23_expected_prev;
	end
	if (
		( Q24_expected_prev !== 1'bx ) && ( Q24_prev !== Q24_expected_prev )
		&& ((Q24_expected_prev !== last_Q24_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q24 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q24_expected_prev);
		$display ("     Real value = %b", Q24_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_Q24_exp = Q24_expected_prev;
	end
	if (
		( Q25_expected_prev !== 1'bx ) && ( Q25_prev !== Q25_expected_prev )
		&& ((Q25_expected_prev !== last_Q25_exp) ||
			on_first_change[44])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q25_expected_prev);
		$display ("     Real value = %b", Q25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[44] = 1'b0;
		last_Q25_exp = Q25_expected_prev;
	end
	if (
		( Q26_expected_prev !== 1'bx ) && ( Q26_prev !== Q26_expected_prev )
		&& ((Q26_expected_prev !== last_Q26_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q26 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q26_expected_prev);
		$display ("     Real value = %b", Q26_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_Q26_exp = Q26_expected_prev;
	end
	if (
		( Q27_expected_prev !== 1'bx ) && ( Q27_prev !== Q27_expected_prev )
		&& ((Q27_expected_prev !== last_Q27_exp) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q27 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q27_expected_prev);
		$display ("     Real value = %b", Q27_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_Q27_exp = Q27_expected_prev;
	end
	if (
		( ram_expected_prev[0] !== 1'bx ) && ( ram_prev[0] !== ram_expected_prev[0] )
		&& ((ram_expected_prev[0] !== last_ram_exp[0]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[0] = ram_expected_prev[0];
	end
	if (
		( ram_expected_prev[1] !== 1'bx ) && ( ram_prev[1] !== ram_expected_prev[1] )
		&& ((ram_expected_prev[1] !== last_ram_exp[1]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[1] = ram_expected_prev[1];
	end
	if (
		( ram_expected_prev[2] !== 1'bx ) && ( ram_prev[2] !== ram_expected_prev[2] )
		&& ((ram_expected_prev[2] !== last_ram_exp[2]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[2] = ram_expected_prev[2];
	end
	if (
		( ram_expected_prev[3] !== 1'bx ) && ( ram_prev[3] !== ram_expected_prev[3] )
		&& ((ram_expected_prev[3] !== last_ram_exp[3]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[3] = ram_expected_prev[3];
	end
	if (
		( ram_expected_prev[4] !== 1'bx ) && ( ram_prev[4] !== ram_expected_prev[4] )
		&& ((ram_expected_prev[4] !== last_ram_exp[4]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[4] = ram_expected_prev[4];
	end
	if (
		( ram_expected_prev[5] !== 1'bx ) && ( ram_prev[5] !== ram_expected_prev[5] )
		&& ((ram_expected_prev[5] !== last_ram_exp[5]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[5] = ram_expected_prev[5];
	end
	if (
		( ram_expected_prev[6] !== 1'bx ) && ( ram_prev[6] !== ram_expected_prev[6] )
		&& ((ram_expected_prev[6] !== last_ram_exp[6]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[6] = ram_expected_prev[6];
	end
	if (
		( ram_expected_prev[7] !== 1'bx ) && ( ram_prev[7] !== ram_expected_prev[7] )
		&& ((ram_expected_prev[7] !== last_ram_exp[7]) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_expected_prev);
		$display ("     Real value = %b", ram_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_ram_exp[7] = ram_expected_prev[7];
	end
	if (
		( reg_we_expected_prev !== 1'bx ) && ( reg_we_prev !== reg_we_expected_prev )
		&& ((reg_we_expected_prev !== last_reg_we_exp) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port reg_we :: @time = %t",  $realtime);
		$display ("     Expected value = %b", reg_we_expected_prev);
		$display ("     Real value = %b", reg_we_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_reg_we_exp = reg_we_expected_prev;
	end
	if (
		( regdes_expected_prev !== 1'bx ) && ( regdes_prev !== regdes_expected_prev )
		&& ((regdes_expected_prev !== last_regdes_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regdes :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regdes_expected_prev);
		$display ("     Real value = %b", regdes_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_regdes_exp = regdes_expected_prev;
	end
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( S_expected_prev[4] !== 1'bx ) && ( S_prev[4] !== S_expected_prev[4] )
		&& ((S_expected_prev[4] !== last_S_exp[4]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[4] = S_expected_prev[4];
	end
	if (
		( S_expected_prev[5] !== 1'bx ) && ( S_prev[5] !== S_expected_prev[5] )
		&& ((S_expected_prev[5] !== last_S_exp[5]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[5] = S_expected_prev[5];
	end
	if (
		( S_expected_prev[6] !== 1'bx ) && ( S_prev[6] !== S_expected_prev[6] )
		&& ((S_expected_prev[6] !== last_S_exp[6]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[6] = S_expected_prev[6];
	end
	if (
		( S_expected_prev[7] !== 1'bx ) && ( S_prev[7] !== S_expected_prev[7] )
		&& ((S_expected_prev[7] !== last_S_exp[7]) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_S_exp[7] = S_expected_prev[7];
	end
	if (
		( sign_expected_prev !== 1'bx ) && ( sign_prev !== sign_expected_prev )
		&& ((sign_expected_prev !== last_sign_exp) ||
			on_first_change[52])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[52] = 1'b0;
		last_sign_exp = sign_expected_prev;
	end
	if (
		( wrflag_expected_prev !== 1'bx ) && ( wrflag_prev !== wrflag_expected_prev )
		&& ((wrflag_expected_prev !== last_wrflag_exp) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wrflag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wrflag_expected_prev);
		$display ("     Real value = %b", wrflag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_wrflag_exp = wrflag_expected_prev;
	end
	if (
		( writemem_expected_prev !== 1'bx ) && ( writemem_prev !== writemem_expected_prev )
		&& ((writemem_expected_prev !== last_writemem_exp) ||
			on_first_change[54])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port writemem :: @time = %t",  $realtime);
		$display ("     Expected value = %b", writemem_expected_prev);
		$display ("     Real value = %b", writemem_prev);
		nummismatches = nummismatches + 1;
		on_first_change[54] = 1'b0;
		last_writemem_exp = writemem_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module systemB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
// wires                                               
wire ALUSRCB;
wire branch;
wire [3:0] cs;
wire [7:0] data_inH;
wire [7:0] data_inL;
wire [7:0] DI;
wire [1:0] flagin;
wire [7:0] flagout;
wire [15:0] instr;
wire [7:0] IO0;
wire [7:0] IO1;
wire IO_read;
wire jump;
wire memtoreg;
wire [1:0] N1;
wire [1:0] N2;
wire [7:0] ND;
wire [3:0] num_C0;
wire [3:0] num_C1;
wire [3:0] num_C2;
wire [3:0] num_C3;
wire [7:0] pc;
wire q0;
wire Q1;
wire Q2;
wire q3;
wire q4;
wire q5;
wire q6;
wire q7;
wire Q10;
wire Q11;
wire Q12;
wire Q13;
wire Q14;
wire Q15;
wire Q16;
wire Q17;
wire Q20;
wire Q21;
wire Q22;
wire Q23;
wire Q24;
wire Q25;
wire Q26;
wire Q27;
wire [7:0] ram;
wire reg_we;
wire regdes;
wire [7:0] result;
wire [7:0] S;
wire sign;
wire wrflag;
wire writemem;

wire sampler;                             

// assign statements (if any)                          
systemB i1 (
// port map - connection between master ports and signals/registers   
	.ALUSRCB(ALUSRCB),
	.branch(branch),
	.CLK(CLK),
	.cs(cs),
	.data_inH(data_inH),
	.data_inL(data_inL),
	.DI(DI),
	.flagin(flagin),
	.flagout(flagout),
	.instr(instr),
	.IO0(IO0),
	.IO1(IO1),
	.IO_read(IO_read),
	.jump(jump),
	.memtoreg(memtoreg),
	.N1(N1),
	.N2(N2),
	.ND(ND),
	.num_C0(num_C0),
	.num_C1(num_C1),
	.num_C2(num_C2),
	.num_C3(num_C3),
	.pc(pc),
	.q0(q0),
	.q3(q3),
	.q4(q4),
	.q5(q5),
	.q6(q6),
	.q7(q7),
	.Q10(Q10),
	.Q11(Q11),
	.Q12(Q12),
	.Q13(Q13),
	.Q14(Q14),
	.Q15(Q15),
	.Q16(Q16),
	.Q17(Q17),
	.Q20(Q20),
	.Q21(Q21),
	.Q22(Q22),
	.Q23(Q23),
	.Q24(Q24),
	.Q25(Q25),
	.Q26(Q26),
	.Q27(Q27),
	.ram(ram),
	.reg_we(reg_we),
	.regdes(regdes),
	.result(result),
	.RST(RST),
	.S(S),
	.sign(sign),
	.wrflag(wrflag),
	.writemem(writemem)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RST
initial
begin
	RST = 1'b1;
end 

systemB_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RST(RST),
	.sampler_tx(sampler)
);

systemB_vlg_check_tst tb_out(
	.ALUSRCB(ALUSRCB),
	.branch(branch),
	.cs(cs),
	.data_inH(data_inH),
	.data_inL(data_inL),
	.DI(DI),
	.flagin(flagin),
	.flagout(flagout),
	.instr(instr),
	.IO0(IO0),
	.IO1(IO1),
	.IO_read(IO_read),
	.jump(jump),
	.memtoreg(memtoreg),
	.N1(N1),
	.N2(N2),
	.ND(ND),
	.num_C0(num_C0),
	.num_C1(num_C1),
	.num_C2(num_C2),
	.num_C3(num_C3),
	.pc(pc),
	.q0(q0),
	.Q1(Q1),
	.Q2(Q2),
	.q3(q3),
	.q4(q4),
	.q5(q5),
	.q6(q6),
	.q7(q7),
	.Q10(Q10),
	.Q11(Q11),
	.Q12(Q12),
	.Q13(Q13),
	.Q14(Q14),
	.Q15(Q15),
	.Q16(Q16),
	.Q17(Q17),
	.Q20(Q20),
	.Q21(Q21),
	.Q22(Q22),
	.Q23(Q23),
	.Q24(Q24),
	.Q25(Q25),
	.Q26(Q26),
	.Q27(Q27),
	.ram(ram),
	.reg_we(reg_we),
	.regdes(regdes),
	.result(result),
	.S(S),
	.sign(sign),
	.wrflag(wrflag),
	.writemem(writemem),
	.sampler_rx(sampler)
);
endmodule

