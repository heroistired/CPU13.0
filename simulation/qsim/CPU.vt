// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/05/2016 18:37:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    NixieScan
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NixieScan_vlg_sample_tst(
	clk,
	num_C0,
	num_C1,
	num_C2,
	num_C3,
	sampler_tx
);
input  clk;
input [3:0] num_C0;
input [3:0] num_C1;
input [3:0] num_C2;
input [3:0] num_C3;
output sampler_tx;

reg sample;
time current_time;
always @(clk or num_C0 or num_C1 or num_C2 or num_C3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module NixieScan_vlg_check_tst (
	out,
	seg_sel,
	sampler_rx
);
input [3:0] out;
input [3:0] seg_sel;
input sampler_rx;

reg [3:0] out_expected;
reg [3:0] seg_sel_expected;

reg [3:0] out_prev;
reg [3:0] seg_sel_prev;

reg [3:0] out_expected_prev;
reg [3:0] seg_sel_expected_prev;

reg [3:0] last_out_exp;
reg [3:0] last_seg_sel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	out_prev = out;
	seg_sel_prev = seg_sel;
end

// update expected /o prevs

always @(trigger)
begin
	out_expected_prev = out_expected;
	seg_sel_expected_prev = seg_sel_expected;
end


// expected out[ 3 ]
initial
begin
	out_expected[3] = 1'bX;
end 
// expected out[ 2 ]
initial
begin
	out_expected[2] = 1'bX;
end 
// expected out[ 1 ]
initial
begin
	out_expected[1] = 1'bX;
end 
// expected out[ 0 ]
initial
begin
	out_expected[0] = 1'bX;
end 
// expected seg_sel[ 3 ]
initial
begin
	seg_sel_expected[3] = 1'bX;
end 
// expected seg_sel[ 2 ]
initial
begin
	seg_sel_expected[2] = 1'bX;
end 
// expected seg_sel[ 1 ]
initial
begin
	seg_sel_expected[1] = 1'bX;
end 
// expected seg_sel[ 0 ]
initial
begin
	seg_sel_expected[0] = 1'bX;
end 
// generate trigger
always @(out_expected or out or seg_sel_expected or seg_sel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected out = %b | expected seg_sel = %b | ",out_expected_prev,seg_sel_expected_prev);
	$display("| real out = %b | real seg_sel = %b | ",out_prev,seg_sel_prev);
`endif
	if (
		( out_expected_prev[0] !== 1'bx ) && ( out_prev[0] !== out_expected_prev[0] )
		&& ((out_expected_prev[0] !== last_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[0] = out_expected_prev[0];
	end
	if (
		( out_expected_prev[1] !== 1'bx ) && ( out_prev[1] !== out_expected_prev[1] )
		&& ((out_expected_prev[1] !== last_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[1] = out_expected_prev[1];
	end
	if (
		( out_expected_prev[2] !== 1'bx ) && ( out_prev[2] !== out_expected_prev[2] )
		&& ((out_expected_prev[2] !== last_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[2] = out_expected_prev[2];
	end
	if (
		( out_expected_prev[3] !== 1'bx ) && ( out_prev[3] !== out_expected_prev[3] )
		&& ((out_expected_prev[3] !== last_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_expected_prev);
		$display ("     Real value = %b", out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_out_exp[3] = out_expected_prev[3];
	end
	if (
		( seg_sel_expected_prev[0] !== 1'bx ) && ( seg_sel_prev[0] !== seg_sel_expected_prev[0] )
		&& ((seg_sel_expected_prev[0] !== last_seg_sel_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_sel_exp[0] = seg_sel_expected_prev[0];
	end
	if (
		( seg_sel_expected_prev[1] !== 1'bx ) && ( seg_sel_prev[1] !== seg_sel_expected_prev[1] )
		&& ((seg_sel_expected_prev[1] !== last_seg_sel_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_sel_exp[1] = seg_sel_expected_prev[1];
	end
	if (
		( seg_sel_expected_prev[2] !== 1'bx ) && ( seg_sel_prev[2] !== seg_sel_expected_prev[2] )
		&& ((seg_sel_expected_prev[2] !== last_seg_sel_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_sel_exp[2] = seg_sel_expected_prev[2];
	end
	if (
		( seg_sel_expected_prev[3] !== 1'bx ) && ( seg_sel_prev[3] !== seg_sel_expected_prev[3] )
		&& ((seg_sel_expected_prev[3] !== last_seg_sel_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_sel[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_sel_expected_prev);
		$display ("     Real value = %b", seg_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg_sel_exp[3] = seg_sel_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module NixieScan_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] num_C0;
reg [3:0] num_C1;
reg [3:0] num_C2;
reg [3:0] num_C3;
// wires                                               
wire [3:0] out;
wire [3:0] seg_sel;

wire sampler;                             

// assign statements (if any)                          
NixieScan i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.num_C0(num_C0),
	.num_C1(num_C1),
	.num_C2(num_C2),
	.num_C3(num_C3),
	.out(out),
	.seg_sel(seg_sel)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// num_C0[ 3 ]
initial
begin
	num_C0[3] = 1'b0;
end 
// num_C0[ 2 ]
initial
begin
	num_C0[2] = 1'b0;
end 
// num_C0[ 1 ]
initial
begin
	num_C0[1] = 1'b0;
end 
// num_C0[ 0 ]
initial
begin
	num_C0[0] = 1'b1;
end 
// num_C1[ 3 ]
initial
begin
	num_C1[3] = 1'b0;
end 
// num_C1[ 2 ]
initial
begin
	num_C1[2] = 1'b0;
end 
// num_C1[ 1 ]
initial
begin
	num_C1[1] = 1'b1;
end 
// num_C1[ 0 ]
initial
begin
	num_C1[0] = 1'b0;
end 
// num_C2[ 3 ]
initial
begin
	num_C2[3] = 1'b0;
end 
// num_C2[ 2 ]
initial
begin
	num_C2[2] = 1'b0;
end 
// num_C2[ 1 ]
initial
begin
	num_C2[1] = 1'b1;
end 
// num_C2[ 0 ]
initial
begin
	num_C2[0] = 1'b1;
end 
// num_C3[ 3 ]
initial
begin
	num_C3[3] = 1'b0;
end 
// num_C3[ 2 ]
initial
begin
	num_C3[2] = 1'b1;
end 
// num_C3[ 1 ]
initial
begin
	num_C3[1] = 1'b0;
end 
// num_C3[ 0 ]
initial
begin
	num_C3[0] = 1'b0;
end 

NixieScan_vlg_sample_tst tb_sample (
	.clk(clk),
	.num_C0(num_C0),
	.num_C1(num_C1),
	.num_C2(num_C2),
	.num_C3(num_C3),
	.sampler_tx(sampler)
);

NixieScan_vlg_check_tst tb_out(
	.out(out),
	.seg_sel(seg_sel),
	.sampler_rx(sampler)
);
endmodule

